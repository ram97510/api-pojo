/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2024-11-15T11:15:23.940+05:30
  3.47.0.99999
  
  Standalone prediction code with sample test data for GBMModel named gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://172.16.0.18:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://172.16.0.18:54321/3/Models.java/gbm-b298713c-a0ac-4c98-9f7c-c574162eac3a > gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
package com.intense.mlapi.models;
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a", algorithm="gbm")
public class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 16; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* age */ null,
    /* job */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_1.VALUES,
    /* marital */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_2.VALUES,
    /* education */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_3.VALUES,
    /* default */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_4.VALUES,
    /* balance */ null,
    /* housing */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_6.VALUES,
    /* loan */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_7.VALUES,
    /* contact */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_8.VALUES,
    /* day */ null,
    /* month */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_10.VALUES,
    /* duration */ null,
    /* campaign */ null,
    /* pdays */ null,
    /* previous */ null,
    /* poutcome */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_15.VALUES,
    /* y */ gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_16.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.8830151954170445,0.11698480458295547};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.8830151954170445,0.11698480458295547};

  public gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a() { super(NAMES,DOMAINS,"y"); }
  public String getUUID() { return Long.toString(7467720208980984768L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_0.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_1.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_2.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_3.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_4.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_5.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_6.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_7.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_8.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_9.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_10.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_11.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_12.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_13.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_14.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_15.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_16.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_17.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_18.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_19.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_20.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_21.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_22.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_23.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_24.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_25.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_26.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_27.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_28.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_29.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_30.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_31.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_32.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_33.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_34.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_35.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_36.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_37.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_38.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_39.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_40.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_41.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_42.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_43.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_44.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_45.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_46.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_47.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_48.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_49.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_50.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_51.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_52.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_53.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_54.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_55.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_56.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_57.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_58.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_59.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_60.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_61.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_62.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_63.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_64.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_65.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_66.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_67.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_68.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_69.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_70.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_71.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_72.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_73.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_74.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_75.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_76.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_77.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_78.score0(data,preds);
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_79.score0(data,preds);
    preds[2] = preds[1] + -2.0212983583048483;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.38589106359075076);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a implements java.io.Serializable {
  public static final String[] VALUES = new String[16];
  static {
    NamesHolder_gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "age";
      sa[1] = "job";
      sa[2] = "marital";
      sa[3] = "education";
      sa[4] = "default";
      sa[5] = "balance";
      sa[6] = "housing";
      sa[7] = "loan";
      sa[8] = "contact";
      sa[9] = "day";
      sa[10] = "month";
      sa[11] = "duration";
      sa[12] = "campaign";
      sa[13] = "pdays";
      sa[14] = "previous";
      sa[15] = "poutcome";
    }
  }
}
// The class representing column job
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[12];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "admin.";
      sa[1] = "blue-collar";
      sa[2] = "entrepreneur";
      sa[3] = "housemaid";
      sa[4] = "management";
      sa[5] = "retired";
      sa[6] = "self-employed";
      sa[7] = "services";
      sa[8] = "student";
      sa[9] = "technician";
      sa[10] = "unemployed";
      sa[11] = "unknown";
    }
  }
}
// The class representing column marital
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "divorced";
      sa[1] = "married";
      sa[2] = "single";
    }
  }
}
// The class representing column education
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "primary";
      sa[1] = "secondary";
      sa[2] = "tertiary";
      sa[3] = "unknown";
    }
  }
}
// The class representing column default
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_4_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "no";
      sa[1] = "yes";
    }
  }
}
// The class representing column housing
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_6_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "no";
      sa[1] = "yes";
    }
  }
}
// The class representing column loan
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_7_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "no";
      sa[1] = "yes";
    }
  }
}
// The class representing column contact
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_8_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "cellular";
      sa[1] = "telephone";
      sa[2] = "unknown";
    }
  }
}
// The class representing column month
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[12];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_10_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "apr";
      sa[1] = "aug";
      sa[2] = "dec";
      sa[3] = "feb";
      sa[4] = "jan";
      sa[5] = "jul";
      sa[6] = "jun";
      sa[7] = "mar";
      sa[8] = "may";
      sa[9] = "nov";
      sa[10] = "oct";
      sa[11] = "sep";
    }
  }
}
// The class representing column poutcome
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_15 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_15_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_15_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "failure";
      sa[1] = "other";
      sa[2] = "success";
      sa[3] = "unknown";
    }
  }
}
// The class representing column y
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_16 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_16_0.fill(VALUES);
  }
  static final class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_ColInfo_16_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "no";
      sa[1] = "yes";
    }
  }
}

class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_0_class_0.score0(fdata);
  }
}
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* duration */] < 518.5f ? 
         (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[15])) ? 
             (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 312.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] < 60.5f ? 
                        -0.0861765f : 
                        0.13214368f) : 
                     (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                        -0.08693113f : 
                        0.053367693f)) : 
                 (data[11 /* duration */] < 174.5f ? 
                     (data[11 /* duration */] < 94.5f ? 
                        -0.06305262f : 
                        0.16856475f) : 
                     (Double.isNaN(data[11]) || data[11 /* duration */] < 287.5f ? 
                        0.3707818f : 
                        0.49324727f))) : 
             (data[11 /* duration */] < 162.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 132.5f ? 
                     (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[10])) ? 
                        -0.038782164f : 
                        0.19007722f) : 
                     (Double.isNaN(data[1 /* job */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        0.2561431f : 
                        0.56214255f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[6 /* housing */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 2) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                        0.300292f : 
                        0.59708166f) : 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        0.39925417f : 
                        0.6556347f)))) : 
         (Double.isNaN(data[11]) || data[11 /* duration */] < 828.5f ? 
             (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                     (Double.isNaN(data[11]) || data[11 /* duration */] < 669.5f ? 
                        0.04480231f : 
                        0.17231517f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[10])) ? 
                        0.1835453f : 
                        0.37024698f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[3 /* education */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 4) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                        0.27397576f : 
                        0.6418387f) : 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        0.68540144f : 
                        0.8312008f))) : 
             (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[10])) ? 
                     (data[11 /* duration */] < 1020.5f ? 
                        0.23877357f : 
                        0.3684207f) : 
                     (Double.isNaN(data[1 /* job */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                        0.39625707f : 
                        0.55768454f)) : 
                 (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        0.36880618f : 
                        0.48007894f) : 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.2963156f : 
                        0.56823003f)))));
    return pred;
  } // constant pool size = 226B, number of visited nodes = 31, static init size = 600B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-124, 12, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {3, 0, 0, 0};
  // {01010011 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-54, 10, 0, 0};
  // {00001010 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 12, 0, 0};
  // {11110111 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, 12, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11001111 11110000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-13, 15, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {01100011 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-58, 13, 0, 0};
  // {01011111 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-6, 14, 0, 0};
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {6, 0, 0, 0};
  // {00101101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-76, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10101111 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-11, 4, 0, 0};
  // {10100111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-27, 0, 0, 0};
  // {01000011 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-62, 9, 0, 0};
  // {11100001 11110000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-121, 15, 0, 0};
  // {11001111 11110000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-13, 15, 0, 0};
}


class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_1_class_0.score0(fdata);
  }
}
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* duration */] < 523.5f ? 
         (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[15])) ? 
             (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 225.5f ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[10])) ? 
                        -0.0968617f : 
                        -0.026271604f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] < 60.5f ? 
                        -0.022763036f : 
                        0.33393908f)) : 
                 (data[11 /* duration */] < 131.0f ? 
                     (data[11 /* duration */] < 79.5f ? 
                        -0.09577688f : 
                        0.067350954f) : 
                     (data[11 /* duration */] < 198.5f ? 
                        0.17943987f : 
                        0.2881044f))) : 
             (data[11 /* duration */] < 161.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 131.5f ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[10])) ? 
                        0.03402655f : 
                        0.24405198f) : 
                     (Double.isNaN(data[1 /* job */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        0.17831665f : 
                        0.3435252f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[6 /* housing */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 2) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                        0.20682535f : 
                        0.35554907f) : 
                     (data[11 /* duration */] < 212.5f ? 
                        0.32158715f : 
                        0.38260284f)))) : 
         (Double.isNaN(data[11]) || data[11 /* duration */] < 807.5f ? 
             (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                     (Double.isNaN(data[11]) || data[11 /* duration */] < 634.5f ? 
                        0.026258077f : 
                        0.12670618f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[10])) ? 
                        0.14203869f : 
                        0.24972539f)) : 
                 (!Double.isNaN(data[6 /* housing */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 2) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[6])) ? 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        0.19527537f : 
                        0.3697601f) : 
                     (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[10])) ? 
                        0.34631675f : 
                        0.449763f))) : 
             (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                 (data[11 /* duration */] < 872.5f ? 
                     (Double.isNaN(data[1 /* job */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.09566818f : 
                        0.28085837f) : 
                     (Double.isNaN(data[2 /* marital */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        0.23758017f : 
                        0.39818788f)) : 
                 (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[15])) ? 
                     (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[10])) ? 
                        0.25941548f : 
                        0.31322291f) : 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        0.27390444f : 
                        0.50655526f)))));
    return pred;
  } // constant pool size = 221B, number of visited nodes = 31, static init size = 570B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-124, 12, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {00010001 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-120, 8, 0, 0};
  // {00001010 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 12, 0, 0};
  // {01110111 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-18, 12, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {3, 0, 0, 0};
  // {01100011 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-58, 13, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {10111111 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, 13, 0, 0};
  // {11001111 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-13, 6, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {3, 0, 0, 0};
  // {00010100 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {40, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {01000111 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-30, 9, 0, 0};
  // {00011111 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-8, 13, 0, 0};
}


class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_2_class_0.score0(fdata);
  }
}
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* duration */] < 451.5f ? 
         (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[15])) ? 
             (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                 (Double.isNaN(data[0]) || data[0 /* age */] < 60.5f ? 
                     (Double.isNaN(data[13]) || data[13 /* pdays */] < 387.0f ? 
                        -0.072649226f : 
                        0.40123692f) : 
                     (data[11 /* duration */] < 121.5f ? 
                        -0.07062373f : 
                        0.18978582f)) : 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 184.0f ? 
                     (data[11 /* duration */] < 94.0f ? 
                        -0.056644376f : 
                        0.11139827f) : 
                     (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                        0.12370751f : 
                        0.22699024f))) : 
             (data[11 /* duration */] < 132.0f ? 
                 (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[10])) ? 
                     (data[9 /* day */] < 7.5f ? 
                        0.14076541f : 
                        -0.03768448f) : 
                     (data[11 /* duration */] < 82.5f ? 
                        -0.03602675f : 
                        0.21750465f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[10])) ? 
                     (Double.isNaN(data[13]) || data[13 /* pdays */] < 215.5f ? 
                        0.23002724f : 
                        0.044538252f) : 
                     (data[11 /* duration */] < 177.5f ? 
                        0.21884404f : 
                        0.2681306f)))) : 
         (data[11 /* duration */] < 635.5f ? 
             (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
                        -0.034976427f : 
                        0.06267791f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                        0.094773f : 
                        0.29948738f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[10])) ? 
                     (data[11 /* duration */] < 486.0f ? 
                        0.37858546f : 
                        0.18799338f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[10])) ? 
                        0.29681644f : 
                        0.37324294f))) : 
             (Double.isNaN(data[11]) || data[11 /* duration */] < 870.5f ? 
                 (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[10])) ? 
                        0.10257215f : 
                        0.40001708f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[10])) ? 
                        0.17072481f : 
                        0.23796938f)) : 
                 (Double.isNaN(data[2 /* marital */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                     (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[15])) ? 
                        0.19309355f : 
                        0.32815284f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[10])) ? 
                        0.22464806f : 
                        0.27613965f)))));
    return pred;
  } // constant pool size = 211B, number of visited nodes = 31, static init size = 510B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-124, 12, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {5, 0, 0, 0};
  // {00010011 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-56, 10, 0, 0};
  // {11110111 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, 12, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {3, 0, 0, 0};
  // {11111111 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 8, 0, 0};
  // {00100011 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-60, 4, 0, 0};
  // {11001111 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-13, 14, 0, 0};
  // {00000001 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 10, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-124, 12, 0, 0};
  // {01110010 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {78, 13, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {5, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11011011 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-37, 12, 0, 0};
}


class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_3_class_0.score0(fdata);
  }
}
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* duration */] < 451.5f ? 
         (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[15])) ? 
             (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                 (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[10])) ? 
                     (Double.isNaN(data[11]) || data[11 /* duration */] < 209.5f ? 
                        -0.09474791f : 
                        -0.03759633f) : 
                     (Double.isNaN(data[9]) || data[9 /* day */] < 21.5f ? 
                        -0.018076405f : 
                        0.2452239f)) : 
                 (data[11 /* duration */] < 132.0f ? 
                     (data[11 /* duration */] < 79.5f ? 
                        -0.091877215f : 
                        0.053305637f) : 
                     (data[11 /* duration */] < 200.5f ? 
                        0.1143982f : 
                        0.17364715f))) : 
             (data[11 /* duration */] < 162.0f ? 
                 (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[10])) ? 
                     (Double.isNaN(data[11]) || data[11 /* duration */] < 113.5f ? 
                        -0.008842947f : 
                        0.10568837f) : 
                     (data[9 /* day */] < 7.5f ? 
                        0.029566936f : 
                        0.24883018f)) : 
                 (Double.isNaN(data[13]) || data[13 /* pdays */] < 199.5f ? 
                     (data[13 /* pdays */] < 45.0f ? 
                        0.027734652f : 
                        0.21786135f) : 
                     (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[10])) ? 
                        0.04172424f : 
                        0.23273695f)))) : 
         (Double.isNaN(data[11]) || data[11 /* duration */] < 652.5f ? 
             (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
                        -0.02539867f : 
                        0.05793013f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                        0.08192798f : 
                        0.2131553f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[10])) ? 
                     (data[11 /* duration */] < 486.5f ? 
                        0.2851249f : 
                        0.14187244f) : 
                     (data[0 /* age */] < 41.5f ? 
                        0.22672318f : 
                        0.26609656f))) : 
             (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 886.5f ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[10])) ? 
                        0.08675047f : 
                        0.29080045f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[10])) ? 
                        0.1336364f : 
                        0.18282971f)) : 
                 (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[15])) ? 
                     (Double.isNaN(data[2 /* marital */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        0.15208852f : 
                        0.19526789f) : 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                        0.17601274f : 
                        0.2827284f)))));
    return pred;
  } // constant pool size = 206B, number of visited nodes = 31, static init size = 480B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-124, 12, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {00010001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-120, 12, 0, 0};
  // {01101110 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {118, 14, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {3, 0, 0, 0};
  // {11111111 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 8, 0, 0};
  // {00100011 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-60, 12, 0, 0};
  // {11001111 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-13, 14, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-124, 12, 0, 0};
  // {10111111 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, 4, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {5, 0, 0, 0};
  // {00011111 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-8, 13, 0, 0};
}


class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_4_class_0.score0(fdata);
  }
}
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* duration */] < 437.5f ? 
         (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[15])) ? 
             (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                 (Double.isNaN(data[6 /* housing */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                     (Double.isNaN(data[13]) || data[13 /* pdays */] < 387.0f ? 
                        -0.08943848f : 
                        0.24009919f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[10])) ? 
                        -0.040272307f : 
                        0.204623f)) : 
                 (data[11 /* duration */] < 128.5f ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[10])) ? 
                        -0.03440244f : 
                        0.10253657f) : 
                     (Double.isNaN(data[13]) || data[13 /* pdays */] < 78.5f ? 
                        0.15226696f : 
                        0.081207864f))) : 
             (data[11 /* duration */] < 132.0f ? 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                     (Double.isNaN(data[1 /* job */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.11390238f : 
                        0.0569663f) : 
                     (data[11 /* duration */] < 81.5f ? 
                        -0.02261926f : 
                        0.12898855f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[6 /* housing */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 2) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[6])) ? 
                        0.082946025f : 
                        0.1647015f) : 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        0.15342897f : 
                        0.19741951f)))) : 
         (Double.isNaN(data[11]) || data[11 /* duration */] < 648.5f ? 
             (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                     (data[11 /* duration */] < 498.5f ? 
                        -0.05242769f : 
                        0.024211993f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[10])) ? 
                        0.06948849f : 
                        0.1752321f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[1 /* job */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.07195696f : 
                        0.19021289f) : 
                     (data[11 /* duration */] < 474.5f ? 
                        0.26612625f : 
                        0.1992615f))) : 
             (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 882.5f ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[10])) ? 
                        0.07261449f : 
                        0.23364425f) : 
                     (Double.isNaN(data[9]) || data[9 /* day */] < 18.5f ? 
                        0.10892345f : 
                        0.16746627f)) : 
                 (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[15])) ? 
                     (Double.isNaN(data[9]) || data[9 /* day */] < 16.5f ? 
                        0.15765977f : 
                        0.12447358f) : 
                     (Double.isNaN(data[1 /* job */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        0.1627068f : 
                        0.24792725f)))));
    return pred;
  } // constant pool size = 221B, number of visited nodes = 31, static init size = 570B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-124, 12, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, 0};
  // {01010011 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-54, 10, 0, 0};
  // {00001011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-48, 1, 0, 0};
  // {01110111 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-18, 12, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {01001011 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-46, 13, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {3, 0, 0, 0};
  // {00100011 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-60, 12, 0, 0};
  // {11001111 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-13, 14, 0, 0};
  // {10011111 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-7, 12, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00100001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-124, 12, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00011011 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-40, 13, 0, 0};
}


class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_5_class_0.score0(fdata);
  }
}
class gbm_b298713c_a0ac_4c98_9f7c_c574162eac3a_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* duration */] < 408.5f ? 
         (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[15])) ? 
             (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                 (Double.isNaN(data[13]) || data[13 /* pdays */] < 383.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* duration */] < 152.5f ? 
                        -0.0998145f : 
                        -0.050211374f) : 
                     (Double.isNaN(data[11]) || data[11 /* duration */] < 224.5f ? 
                        0.04473775f : 
                        0.49279627f)) : 
                 (Double.isNaN(data[6 /* housing */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                     (Double.isNaN(data[9]) || data[9 /* day */] < 21.5f ? 
                        -0.048050217f : 
                        0.13634486f) : 
                     (data[11 /* duration */] < 128.5f ? 
                        -0.017538667f : 
                        0.1218341f))) : 
             (data[11 /* duration */] < 162.5f ? 
                 (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[10])) ? 
                     (data[9 /* day */] < 5.5f ? 
                        0.13015983f : 
                        0.010172113f) : 
                     (Double.isNaN(data[9]) || data[9 /* day */] < 21.5f ? 
                        0.08840302f : 
                        0.2838702f)) : 
                 (Double.isNaN(data[13]) || data[13 /* pdays */] < 199.5f ? 
                     (data[13 /* pdays */] < 47.0f ? 
                        0.01014157f : 
                        0.1606524f) : 
                     (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[10])) ? 
                        0.016044289f : 
                        0.16360869f)))) : 
         (Double.isNaN(data[11]) || data[11 /* duration */] < 646.5f ? 
             (Double.isNaN(data[15 /* poutcome */]) || !GenModel.bitSetIsInRange(32, 0, data[15]) || (data[15] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[15]) && (data[15] < 4) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* housing */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 2) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
                        0.01562764f : 
                        0.28551143f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                        0.072565295f : 
                        0.22649509f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[10])) ? 
                     (Double.isNaN(data[9]) || data[9 /* day */] < 24.5f ? 
                        0.13823824f : 
                        -0.011368197f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] < 44.5f ? 
                        0.15416884f : 
                        0.21213001f))) : 
             (!Double.isNaN(data[8 /* contact */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                 (Double.isNaN(data[11]) || data[11 /* duration */] < 880.5f ? 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[10])) ? 
                        0.06328913f : 
                        0.21783648f) : 
                     (Double.isNaN(data[10 /* month */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[10])) ? 
                        0.09183459f : 
                        0.13323738f)) : 
                 (!Double.isNaN(data[10 /* month */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 12) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[10])) ? 
                     (Double.isNaN(data[9]) || data[9 /* day */] < 28.5f ? 
                        0.086284325f : 
                        0.17930107f) : 
                     (Double.isNaN(data[1 /* job */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 12) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 12) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.12097923f : 
                        0.17886099f)))));
    return pred;
  } // constant pool size = 201B, number of visited nodes = 31, static init size = 450B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {10110001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-115, 12, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110001 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-116, 12, 0, 0};
  // {01101110 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {118, 14, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 4, 0, 0};
  // {10100001 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-123, 8, 0, 0};
  // {11011101 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-69, 6, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00100000 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 12, 0, 0};
  // {10101111 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-11, 4, 0, 0};
  // {01010111 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-22, 13, 0, 0};
  // {10000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-127, 1, 0, 0};