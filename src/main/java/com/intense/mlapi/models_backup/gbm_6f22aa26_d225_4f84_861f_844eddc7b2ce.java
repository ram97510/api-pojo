/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2024-12-30T15:28:29.912+05:30
  3.47.0.99999
  
  Standalone prediction code with sample test data for GBMModel named gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://172.16.0.18:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://172.16.0.18:54321/3/Models.java/gbm-6f22aa26-d225-4f84-861f-844eddc7b2ce > gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
package com.intense.mlapi.models;
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce", algorithm="gbm")
public class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 61; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* COVER_START */ null,
    /* P1_EMP_STATUS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_1.VALUES,
    /* P1_PT_EMP_STATUS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_2.VALUES,
    /* BUS_USE */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_3.VALUES,
    /* CLERICAL */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_4.VALUES,
    /* AD_BUILDINGS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_5.VALUES,
    /* RISK_RATED_AREA_B */ null,
    /* SUM_INSURED_BUILDINGS */ null,
    /* NCD_GRANTED_YEARS_B */ null,
    /* AD_CONTENTS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_9.VALUES,
    /* RISK_RATED_AREA_C */ null,
    /* SUM_INSURED_CONTENTS */ null,
    /* NCD_GRANTED_YEARS_C */ null,
    /* CONTENTS_COVER */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_13.VALUES,
    /* BUILDINGS_COVER */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_14.VALUES,
    /* SPEC_SUM_INSURED */ null,
    /* SPEC_ITEM_PREM */ null,
    /* UNSPEC_HRP_PREM */ null,
    /* P1_MAR_STATUS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_18.VALUES,
    /* P1_POLICY_REFUSED */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_19.VALUES,
    /* P1_SEX */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_20.VALUES,
    /* APPR_ALARM */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_21.VALUES,
    /* APPR_LOCKS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_22.VALUES,
    /* BEDROOMS */ null,
    /* ROOF_CONSTRUCTION */ null,
    /* WALL_CONSTRUCTION */ null,
    /* FLOODING */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_26.VALUES,
    /* LISTED */ null,
    /* MAX_DAYS_UNOCC */ null,
    /* NEIGH_WATCH */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_29.VALUES,
    /* OCC_STATUS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_30.VALUES,
    /* OWNERSHIP_TYPE */ null,
    /* PAYING_GUESTS */ null,
    /* PROP_TYPE */ null,
    /* SAFE_INSTALLED */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_34.VALUES,
    /* SEC_DISC_REQ */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_35.VALUES,
    /* SUBSIDENCE */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_36.VALUES,
    /* YEARBUILT */ null,
    /* PAYMENT_METHOD */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_38.VALUES,
    /* PAYMENT_FREQUENCY */ null,
    /* LEGAL_ADDON_PRE_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_40.VALUES,
    /* LEGAL_ADDON_POST_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_41.VALUES,
    /* HOME_EM_ADDON_PRE_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_42.VALUES,
    /* HOME_EM_ADDON_POST_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_43.VALUES,
    /* GARDEN_ADDON_PRE_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_44.VALUES,
    /* GARDEN_ADDON_POST_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_45.VALUES,
    /* KEYCARE_ADDON_PRE_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_46.VALUES,
    /* KEYCARE_ADDON_POST_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_47.VALUES,
    /* HP1_ADDON_PRE_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_48.VALUES,
    /* HP1_ADDON_POST_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_49.VALUES,
    /* HP2_ADDON_PRE_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_50.VALUES,
    /* HP2_ADDON_POST_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_51.VALUES,
    /* HP3_ADDON_PRE_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_52.VALUES,
    /* HP3_ADDON_POST_REN */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_53.VALUES,
    /* MTA_FLAG */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_54.VALUES,
    /* MTA_FAP */ null,
    /* MTA_APRP */ null,
    /* MTA_DATE */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_57.VALUES,
    /* LAST_ANN_PREM_GROSS */ null,
    /* POL_STATUS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_59.VALUES,
    /* i */ null,
    /* CLAIM3YEARS */ gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_61.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.8847639515120869,0.11523604848791313};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.8847639515120869,0.11523604848791313};

  public gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce() { super(NAMES,DOMAINS,"CLAIM3YEARS"); }
  public String getUUID() { return Long.toString(-2269099368400384803L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_0.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_1.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_2.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_3.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_4.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_5.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_6.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_7.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_8.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_9.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_10.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_11.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_12.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_13.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_14.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_15.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_16.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_17.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_18.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_19.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_20.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_21.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_22.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_23.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_24.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_25.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_26.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_27.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_28.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_29.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_30.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_31.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_32.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_33.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_34.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_35.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_36.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_37.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_38.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_39.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_40.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_41.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_42.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_43.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_44.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_45.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_46.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_47.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_48.score0(data,preds);
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_49.score0(data,preds);
    preds[2] = preds[1] + -2.0383382677618864;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.4158025579645584);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce implements java.io.Serializable {
  public static final String[] VALUES = new String[61];
  static {
    NamesHolder_gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "COVER_START";
      sa[1] = "P1_EMP_STATUS";
      sa[2] = "P1_PT_EMP_STATUS";
      sa[3] = "BUS_USE";
      sa[4] = "CLERICAL";
      sa[5] = "AD_BUILDINGS";
      sa[6] = "RISK_RATED_AREA_B";
      sa[7] = "SUM_INSURED_BUILDINGS";
      sa[8] = "NCD_GRANTED_YEARS_B";
      sa[9] = "AD_CONTENTS";
      sa[10] = "RISK_RATED_AREA_C";
      sa[11] = "SUM_INSURED_CONTENTS";
      sa[12] = "NCD_GRANTED_YEARS_C";
      sa[13] = "CONTENTS_COVER";
      sa[14] = "BUILDINGS_COVER";
      sa[15] = "SPEC_SUM_INSURED";
      sa[16] = "SPEC_ITEM_PREM";
      sa[17] = "UNSPEC_HRP_PREM";
      sa[18] = "P1_MAR_STATUS";
      sa[19] = "P1_POLICY_REFUSED";
      sa[20] = "P1_SEX";
      sa[21] = "APPR_ALARM";
      sa[22] = "APPR_LOCKS";
      sa[23] = "BEDROOMS";
      sa[24] = "ROOF_CONSTRUCTION";
      sa[25] = "WALL_CONSTRUCTION";
      sa[26] = "FLOODING";
      sa[27] = "LISTED";
      sa[28] = "MAX_DAYS_UNOCC";
      sa[29] = "NEIGH_WATCH";
      sa[30] = "OCC_STATUS";
      sa[31] = "OWNERSHIP_TYPE";
      sa[32] = "PAYING_GUESTS";
      sa[33] = "PROP_TYPE";
      sa[34] = "SAFE_INSTALLED";
      sa[35] = "SEC_DISC_REQ";
      sa[36] = "SUBSIDENCE";
      sa[37] = "YEARBUILT";
      sa[38] = "PAYMENT_METHOD";
      sa[39] = "PAYMENT_FREQUENCY";
      sa[40] = "LEGAL_ADDON_PRE_REN";
      sa[41] = "LEGAL_ADDON_POST_REN";
      sa[42] = "HOME_EM_ADDON_PRE_REN";
      sa[43] = "HOME_EM_ADDON_POST_REN";
      sa[44] = "GARDEN_ADDON_PRE_REN";
      sa[45] = "GARDEN_ADDON_POST_REN";
      sa[46] = "KEYCARE_ADDON_PRE_REN";
      sa[47] = "KEYCARE_ADDON_POST_REN";
      sa[48] = "HP1_ADDON_PRE_REN";
      sa[49] = "HP1_ADDON_POST_REN";
      sa[50] = "HP2_ADDON_PRE_REN";
      sa[51] = "HP2_ADDON_POST_REN";
      sa[52] = "HP3_ADDON_PRE_REN";
      sa[53] = "HP3_ADDON_POST_REN";
      sa[54] = "MTA_FLAG";
      sa[55] = "MTA_FAP";
      sa[56] = "MTA_APRP";
      sa[57] = "MTA_DATE";
      sa[58] = "LAST_ANN_PREM_GROSS";
      sa[59] = "POL_STATUS";
      sa[60] = "i";
    }
  }
}
// The class representing column P1_EMP_STATUS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[11];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "A";
      sa[1] = "C";
      sa[2] = "E";
      sa[3] = "F";
      sa[4] = "H";
      sa[5] = "I";
      sa[6] = "N";
      sa[7] = "R";
      sa[8] = "S";
      sa[9] = "U";
      sa[10] = "V";
    }
  }
}
// The class representing column P1_PT_EMP_STATUS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[9];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C";
      sa[1] = "E";
      sa[2] = "F";
      sa[3] = "H";
      sa[4] = "I";
      sa[5] = "R";
      sa[6] = "S";
      sa[7] = "U";
      sa[8] = "V";
    }
  }
}
// The class representing column BUS_USE
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column CLERICAL
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_4_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column AD_BUILDINGS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_5_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column AD_CONTENTS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_9 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_9_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_9_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column CONTENTS_COVER
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_13_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column BUILDINGS_COVER
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_14 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_14_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_14_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column P1_MAR_STATUS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_18 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_18_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_18_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "A";
      sa[1] = "B";
      sa[2] = "C";
      sa[3] = "D";
      sa[4] = "M";
      sa[5] = "N";
      sa[6] = "O";
      sa[7] = "P";
      sa[8] = "S";
      sa[9] = "W";
    }
  }
}
// The class representing column P1_POLICY_REFUSED
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_19 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_19_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_19_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column P1_SEX
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_20 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_20_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_20_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "F";
      sa[1] = "M";
      sa[2] = "N";
    }
  }
}
// The class representing column APPR_ALARM
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_21 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_21_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_21_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column APPR_LOCKS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_22 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_22_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_22_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column FLOODING
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_26 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_26_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_26_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column NEIGH_WATCH
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_29 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_29_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_29_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column OCC_STATUS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_30 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_30_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_30_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "HH";
      sa[1] = "LP";
      sa[2] = "OT";
      sa[3] = "PH";
      sa[4] = "UN";
      sa[5] = "WD";
      sa[6] = "WE";
    }
  }
}
// The class representing column SAFE_INSTALLED
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_34 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_34_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_34_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column SEC_DISC_REQ
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_35 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_35_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_35_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column SUBSIDENCE
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_36_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column PAYMENT_METHOD
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_38 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_38_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_38_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "DD-Other";
      sa[1] = "NonDD";
      sa[2] = "PureDD";
    }
  }
}
// The class representing column LEGAL_ADDON_PRE_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_40 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_40_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_40_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column LEGAL_ADDON_POST_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_41 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_41_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_41_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HOME_EM_ADDON_PRE_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_42 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_42_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_42_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HOME_EM_ADDON_POST_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_43 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_43_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_43_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column GARDEN_ADDON_PRE_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_44 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_44_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_44_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column GARDEN_ADDON_POST_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_45 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_45_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_45_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column KEYCARE_ADDON_PRE_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_46 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_46_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_46_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column KEYCARE_ADDON_POST_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_47 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_47_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_47_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HP1_ADDON_PRE_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_48 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_48_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_48_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HP1_ADDON_POST_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_49 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_49_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_49_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HP2_ADDON_PRE_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_50 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_50_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_50_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HP2_ADDON_POST_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_51 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_51_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_51_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HP3_ADDON_PRE_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_52 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_52_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_52_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column HP3_ADDON_POST_REN
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_53 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_53_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_53_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column MTA_FLAG
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_54 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_54_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_54_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column MTA_DATE
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_57 implements java.io.Serializable {
  public static final String[] VALUES = new String[1287];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_57_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_57_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "01/01/2008";
      sa[1] = "01/01/2009";
      sa[2] = "01/01/2010";
      sa[3] = "01/01/2011";
      sa[4] = "01/02/2008";
      sa[5] = "01/02/2009";
      sa[6] = "01/02/2010";
      sa[7] = "01/02/2011";
      sa[8] = "01/03/2008";
      sa[9] = "01/03/2009";
      sa[10] = "01/03/2010";
      sa[11] = "01/03/2011";
      sa[12] = "01/04/2008";
      sa[13] = "01/04/2009";
      sa[14] = "01/04/2010";
      sa[15] = "01/04/2011";
      sa[16] = "01/05/2009";
      sa[17] = "01/05/2010";
      sa[18] = "01/05/2011";
      sa[19] = "01/06/2008";
      sa[20] = "01/06/2009";
      sa[21] = "01/06/2010";
      sa[22] = "01/06/2011";
      sa[23] = "01/07/2008";
      sa[24] = "01/07/2009";
      sa[25] = "01/07/2010";
      sa[26] = "01/07/2011";
      sa[27] = "01/08/2008";
      sa[28] = "01/08/2009";
      sa[29] = "01/08/2010";
      sa[30] = "01/08/2011";
      sa[31] = "01/09/2008";
      sa[32] = "01/09/2009";
      sa[33] = "01/09/2010";
      sa[34] = "01/10/2008";
      sa[35] = "01/10/2009";
      sa[36] = "01/10/2010";
      sa[37] = "01/10/2011";
      sa[38] = "01/11/2008";
      sa[39] = "01/11/2009";
      sa[40] = "01/11/2010";
      sa[41] = "01/11/2011";
      sa[42] = "01/12/2007";
      sa[43] = "01/12/2008";
      sa[44] = "01/12/2009";
      sa[45] = "01/12/2010";
      sa[46] = "01/12/2011";
      sa[47] = "02/01/2008";
      sa[48] = "02/01/2009";
      sa[49] = "02/01/2010";
      sa[50] = "02/01/2011";
      sa[51] = "02/02/2008";
      sa[52] = "02/02/2009";
      sa[53] = "02/02/2010";
      sa[54] = "02/02/2011";
      sa[55] = "02/03/2008";
      sa[56] = "02/03/2009";
      sa[57] = "02/03/2010";
      sa[58] = "02/03/2011";
      sa[59] = "02/04/2008";
      sa[60] = "02/04/2009";
      sa[61] = "02/04/2010";
      sa[62] = "02/04/2011";
      sa[63] = "02/05/2008";
      sa[64] = "02/05/2009";
      sa[65] = "02/05/2010";
      sa[66] = "02/06/2008";
      sa[67] = "02/06/2009";
      sa[68] = "02/06/2010";
      sa[69] = "02/07/2008";
      sa[70] = "02/07/2009";
      sa[71] = "02/07/2010";
      sa[72] = "02/07/2011";
      sa[73] = "02/08/2009";
      sa[74] = "02/08/2010";
      sa[75] = "02/09/2008";
      sa[76] = "02/09/2009";
      sa[77] = "02/09/2010";
      sa[78] = "02/10/2008";
      sa[79] = "02/10/2009";
      sa[80] = "02/10/2010";
      sa[81] = "02/11/2009";
      sa[82] = "02/11/2010";
      sa[83] = "02/11/2011";
      sa[84] = "02/12/2008";
      sa[85] = "02/12/2009";
      sa[86] = "02/12/2010";
      sa[87] = "03/01/2008";
      sa[88] = "03/01/2009";
      sa[89] = "03/01/2010";
      sa[90] = "03/01/2011";
      sa[91] = "03/02/2008";
      sa[92] = "03/02/2009";
      sa[93] = "03/02/2010";
      sa[94] = "03/02/2011";
      sa[95] = "03/03/2008";
      sa[96] = "03/03/2009";
      sa[97] = "03/03/2010";
      sa[98] = "03/03/2011";
      sa[99] = "03/04/2008";
      sa[100] = "03/04/2009";
      sa[101] = "03/04/2010";
      sa[102] = "03/05/2010";
      sa[103] = "03/05/2011";
      sa[104] = "03/06/2008";
      sa[105] = "03/06/2009";
      sa[106] = "03/06/2010";
      sa[107] = "03/06/2011";
      sa[108] = "03/07/2009";
      sa[109] = "03/07/2010";
      sa[110] = "03/08/2009";
      sa[111] = "03/08/2010";
      sa[112] = "03/08/2011";
      sa[113] = "03/09/2008";
      sa[114] = "03/09/2009";
      sa[115] = "03/09/2010";
      sa[116] = "03/10/2009";
      sa[117] = "03/10/2011";
      sa[118] = "03/11/2008";
      sa[119] = "03/11/2009";
      sa[120] = "03/11/2010";
      sa[121] = "03/11/2011";
      sa[122] = "03/12/2007";
      sa[123] = "03/12/2008";
      sa[124] = "03/12/2009";
      sa[125] = "03/12/2010";
      sa[126] = "04/01/2007";
      sa[127] = "04/01/2008";
      sa[128] = "04/01/2009";
      sa[129] = "04/01/2010";
      sa[130] = "04/01/2011";
      sa[131] = "04/01/2012";
      sa[132] = "04/02/2008";
      sa[133] = "04/02/2009";
      sa[134] = "04/02/2010";
      sa[135] = "04/02/2011";
      sa[136] = "04/03/2008";
      sa[137] = "04/03/2009";
      sa[138] = "04/03/2010";
      sa[139] = "04/03/2011";
      sa[140] = "04/04/2008";
      sa[141] = "04/04/2009";
      sa[142] = "04/04/2010";
      sa[143] = "04/04/2011";
      sa[144] = "04/05/2008";
      sa[145] = "04/05/2009";
      sa[146] = "04/05/2010";
      sa[147] = "04/05/2011";
      sa[148] = "04/06/2009";
      sa[149] = "04/06/2010";
      sa[150] = "04/07/2009";
      sa[151] = "04/07/2011";
      sa[152] = "04/08/2008";
      sa[153] = "04/08/2009";
      sa[154] = "04/08/2010";
      sa[155] = "04/08/2011";
      sa[156] = "04/09/2009";
      sa[157] = "04/09/2010";
      sa[158] = "04/10/2010";
      sa[159] = "04/10/2011";
      sa[160] = "04/11/2008";
      sa[161] = "04/11/2009";
      sa[162] = "04/11/2010";
      sa[163] = "04/11/2011";
      sa[164] = "04/12/2007";
      sa[165] = "04/12/2008";
      sa[166] = "04/12/2009";
      sa[167] = "04/12/2010";
      sa[168] = "05/01/2008";
      sa[169] = "05/01/2009";
      sa[170] = "05/01/2010";
      sa[171] = "05/01/2011";
      sa[172] = "05/01/2012";
      sa[173] = "05/02/2007";
      sa[174] = "05/02/2008";
      sa[175] = "05/02/2009";
      sa[176] = "05/02/2010";
      sa[177] = "05/02/2011";
      sa[178] = "05/03/2008";
      sa[179] = "05/03/2009";
      sa[180] = "05/03/2010";
      sa[181] = "05/03/2011";
      sa[182] = "05/04/2011";
      sa[183] = "05/05/2008";
      sa[184] = "05/05/2009";
      sa[185] = "05/05/2010";
      sa[186] = "05/05/2011";
      sa[187] = "05/06/2008";
      sa[188] = "05/06/2009";
      sa[189] = "05/06/2010";
      sa[190] = "05/07/2010";
      sa[191] = "05/07/2011";
      sa[192] = "05/08/2009";
      sa[193] = "05/08/2010";
      sa[194] = "05/08/2011";
      sa[195] = "05/09/2008";
      sa[196] = "05/09/2009";
      sa[197] = "05/09/2011";
      sa[198] = "05/10/2007";
      sa[199] = "05/10/2009";
      sa[200] = "05/10/2010";
      sa[201] = "05/10/2011";
      sa[202] = "05/11/2007";
      sa[203] = "05/11/2008";
      sa[204] = "05/11/2009";
      sa[205] = "05/11/2010";
      sa[206] = "05/12/2007";
      sa[207] = "05/12/2008";
      sa[208] = "05/12/2009";
      sa[209] = "05/12/2011";
      sa[210] = "06/01/2008";
      sa[211] = "06/01/2009";
      sa[212] = "06/01/2010";
      sa[213] = "06/01/2011";
      sa[214] = "06/01/2012";
      sa[215] = "06/02/2008";
      sa[216] = "06/02/2009";
      sa[217] = "06/02/2010";
      sa[218] = "06/02/2011";
      sa[219] = "06/03/2008";
      sa[220] = "06/03/2009";
      sa[221] = "06/03/2010";
      sa[222] = "06/04/2009";
      sa[223] = "06/04/2010";
      sa[224] = "06/04/2011";
      sa[225] = "06/05/2008";
      sa[226] = "06/05/2009";
      sa[227] = "06/05/2010";
      sa[228] = "06/05/2011";
      sa[229] = "06/06/2008";
      sa[230] = "06/06/2009";
      sa[231] = "06/06/2011";
      sa[232] = "06/07/2009";
      sa[233] = "06/07/2010";
      sa[234] = "06/07/2011";
      sa[235] = "06/08/2008";
      sa[236] = "06/08/2009";
      sa[237] = "06/08/2010";
      sa[238] = "06/09/2010";
      sa[239] = "06/09/2011";
      sa[240] = "06/10/2008";
      sa[241] = "06/10/2009";
      sa[242] = "06/10/2010";
      sa[243] = "06/11/2007";
      sa[244] = "06/11/2008";
      sa[245] = "06/11/2009";
      sa[246] = "06/11/2010";
      sa[247] = "06/12/2007";
      sa[248] = "06/12/2008";
      sa[249] = "06/12/2009";
      sa[250] = "06/12/2010";
      sa[251] = "06/12/2011";
      sa[252] = "07/01/2008";
      sa[253] = "07/01/2009";
      sa[254] = "07/01/2010";
      sa[255] = "07/01/2011";
      sa[256] = "07/02/2008";
      sa[257] = "07/02/2009";
      sa[258] = "07/02/2010";
      sa[259] = "07/02/2011";
      sa[260] = "07/02/2012";
      sa[261] = "07/03/2008";
      sa[262] = "07/03/2009";
      sa[263] = "07/03/2010";
      sa[264] = "07/03/2011";
      sa[265] = "07/04/2008";
      sa[266] = "07/04/2009";
      sa[267] = "07/04/2010";
      sa[268] = "07/04/2011";
      sa[269] = "07/05/2008";
      sa[270] = "07/05/2009";
      sa[271] = "07/05/2010";
      sa[272] = "07/06/2007";
      sa[273] = "07/06/2010";
      sa[274] = "07/06/2011";
      sa[275] = "07/07/2008";
      sa[276] = "07/07/2009";
      sa[277] = "07/07/2010";
      sa[278] = "07/07/2011";
      sa[279] = "07/08/2009";
      sa[280] = "07/08/2010";
      sa[281] = "07/09/2009";
      sa[282] = "07/09/2010";
      sa[283] = "07/09/2011";
      sa[284] = "07/10/2009";
      sa[285] = "07/10/2010";
      sa[286] = "07/10/2011";
      sa[287] = "07/11/2007";
      sa[288] = "07/11/2008";
      sa[289] = "07/11/2009";
      sa[290] = "07/11/2010";
      sa[291] = "07/11/2011";
      sa[292] = "07/12/2007";
      sa[293] = "07/12/2009";
      sa[294] = "07/12/2010";
      sa[295] = "07/12/2011";
      sa[296] = "08/01/2007";
      sa[297] = "08/01/2008";
      sa[298] = "08/01/2009";
      sa[299] = "08/01/2010";
      sa[300] = "08/01/2011";
      sa[301] = "08/02/2008";
      sa[302] = "08/02/2009";
      sa[303] = "08/02/2010";
      sa[304] = "08/02/2011";
      sa[305] = "08/03/2010";
      sa[306] = "08/03/2011";
      sa[307] = "08/04/2008";
      sa[308] = "08/04/2009";
      sa[309] = "08/04/2010";
      sa[310] = "08/04/2011";
      sa[311] = "08/05/2009";
      sa[312] = "08/05/2010";
      sa[313] = "08/06/2008";
      sa[314] = "08/06/2009";
      sa[315] = "08/06/2010";
      sa[316] = "08/06/2011";
      sa[317] = "08/07/2008";
      sa[318] = "08/07/2009";
      sa[319] = "08/07/2010";
      sa[320] = "08/07/2011";
      sa[321] = "08/08/2008";
      sa[322] = "08/08/2009";
      sa[323] = "08/08/2011";
      sa[324] = "08/09/2008";
      sa[325] = "08/09/2009";
      sa[326] = "08/09/2010";
      sa[327] = "08/09/2011";
      sa[328] = "08/10/2008";
      sa[329] = "08/10/2009";
      sa[330] = "08/10/2010";
      sa[331] = "08/11/2007";
      sa[332] = "08/11/2008";
      sa[333] = "08/11/2009";
      sa[334] = "08/11/2010";
      sa[335] = "08/11/2011";
      sa[336] = "08/12/2007";
      sa[337] = "08/12/2008";
      sa[338] = "08/12/2009";
      sa[339] = "08/12/2010";
      sa[340] = "08/12/2011";
      sa[341] = "09/01/2008";
      sa[342] = "09/01/2009";
      sa[343] = "09/01/2010";
      sa[344] = "09/01/2012";
      sa[345] = "09/02/2008";
      sa[346] = "09/02/2009";
      sa[347] = "09/02/2010";
      sa[348] = "09/02/2011";
      sa[349] = "09/02/2012";
      sa[350] = "09/03/2009";
      sa[351] = "09/03/2010";
      sa[352] = "09/03/2011";
      sa[353] = "09/04/2008";
      sa[354] = "09/04/2009";
      sa[355] = "09/04/2010";
      sa[356] = "09/04/2011";
      sa[357] = "09/05/2008";
      sa[358] = "09/05/2009";
      sa[359] = "09/06/2007";
      sa[360] = "09/06/2008";
      sa[361] = "09/06/2009";
      sa[362] = "09/06/2010";
      sa[363] = "09/06/2011";
      sa[364] = "09/07/2008";
      sa[365] = "09/07/2009";
      sa[366] = "09/07/2010";
      sa[367] = "09/08/2008";
      sa[368] = "09/08/2010";
      sa[369] = "09/09/2008";
      sa[370] = "09/09/2009";
      sa[371] = "09/09/2010";
      sa[372] = "09/09/2011";
      sa[373] = "09/10/2008";
      sa[374] = "09/10/2009";
      sa[375] = "09/10/2010";
      sa[376] = "09/11/2007";
      sa[377] = "09/11/2008";
      sa[378] = "09/11/2009";
      sa[379] = "09/11/2010";
      sa[380] = "09/11/2011";
      sa[381] = "09/12/2007";
      sa[382] = "09/12/2008";
      sa[383] = "09/12/2009";
      sa[384] = "09/12/2010";
      sa[385] = "09/12/2011";
      sa[386] = "10/01/2008";
      sa[387] = "10/01/2009";
      sa[388] = "10/01/2010";
      sa[389] = "10/01/2011";
      sa[390] = "10/01/2012";
      sa[391] = "10/02/2008";
      sa[392] = "10/02/2009";
      sa[393] = "10/02/2010";
      sa[394] = "10/02/2011";
      sa[395] = "10/03/2008";
      sa[396] = "10/03/2009";
      sa[397] = "10/03/2010";
      sa[398] = "10/03/2011";
      sa[399] = "10/04/2008";
      sa[400] = "10/04/2010";
      sa[401] = "10/05/2009";
      sa[402] = "10/05/2010";
      sa[403] = "10/05/2011";
      sa[404] = "10/06/2008";
      sa[405] = "10/06/2009";
      sa[406] = "10/06/2010";
      sa[407] = "10/06/2011";
      sa[408] = "10/07/2008";
      sa[409] = "10/07/2009";
      sa[410] = "10/07/2010";
      sa[411] = "10/08/2009";
      sa[412] = "10/08/2010";
      sa[413] = "10/08/2011";
      sa[414] = "10/09/2008";
      sa[415] = "10/09/2009";
      sa[416] = "10/09/2010";
      sa[417] = "10/10/2009";
      sa[418] = "10/10/2010";
      sa[419] = "10/10/2011";
      sa[420] = "10/11/2007";
      sa[421] = "10/11/2008";
      sa[422] = "10/11/2009";
      sa[423] = "10/11/2010";
      sa[424] = "10/11/2011";
      sa[425] = "10/12/2007";
      sa[426] = "10/12/2008";
      sa[427] = "10/12/2009";
      sa[428] = "10/12/2010";
      sa[429] = "11/01/2007";
      sa[430] = "11/01/2008";
      sa[431] = "11/01/2009";
      sa[432] = "11/01/2010";
      sa[433] = "11/01/2011";
      sa[434] = "11/01/2012";
      sa[435] = "11/02/2008";
      sa[436] = "11/02/2009";
      sa[437] = "11/02/2010";
      sa[438] = "11/02/2011";
      sa[439] = "11/03/2008";
      sa[440] = "11/03/2009";
      sa[441] = "11/03/2010";
      sa[442] = "11/03/2011";
      sa[443] = "11/04/2008";
      sa[444] = "11/04/2010";
      sa[445] = "11/04/2011";
      sa[446] = "11/05/2009";
      sa[447] = "11/05/2010";
      sa[448] = "11/05/2011";
      sa[449] = "11/06/2009";
      sa[450] = "11/06/2010";
      sa[451] = "11/07/2008";
      sa[452] = "11/07/2009";
      sa[453] = "11/07/2011";
      sa[454] = "11/08/2008";
      sa[455] = "11/08/2009";
      sa[456] = "11/08/2010";
      sa[457] = "11/09/2009";
      sa[458] = "11/09/2010";
      sa[459] = "11/10/2008";
      sa[460] = "11/10/2009";
      sa[461] = "11/10/2010";
      sa[462] = "11/10/2011";
      sa[463] = "11/11/2007";
      sa[464] = "11/11/2008";
      sa[465] = "11/11/2009";
      sa[466] = "11/11/2010";
      sa[467] = "11/11/2011";
      sa[468] = "11/12/2007";
      sa[469] = "11/12/2008";
      sa[470] = "11/12/2009";
      sa[471] = "11/12/2010";
      sa[472] = "12/01/2007";
      sa[473] = "12/01/2008";
      sa[474] = "12/01/2009";
      sa[475] = "12/01/2010";
      sa[476] = "12/01/2011";
      sa[477] = "12/02/2008";
      sa[478] = "12/02/2009";
      sa[479] = "12/02/2010";
      sa[480] = "12/02/2011";
      sa[481] = "12/03/2008";
      sa[482] = "12/03/2009";
      sa[483] = "12/03/2010";
      sa[484] = "12/03/2011";
      sa[485] = "12/04/2008";
      sa[486] = "12/04/2010";
      sa[487] = "12/04/2011";
      sa[488] = "12/05/2008";
      sa[489] = "12/05/2009";
      sa[490] = "12/05/2010";
      sa[491] = "12/06/2008";
      sa[492] = "12/06/2009";
      sa[493] = "12/06/2010";
      sa[494] = "12/07/2010";
      sa[495] = "12/07/2011";
      sa[496] = "12/08/2008";
      sa[497] = "12/08/2009";
      sa[498] = "12/08/2010";
      sa[499] = "12/08/2011";
      sa[500] = "12/09/2008";
      sa[501] = "12/09/2009";
      sa[502] = "12/10/2009";
      sa[503] = "12/10/2010";
      sa[504] = "12/10/2011";
      sa[505] = "12/11/2007";
      sa[506] = "12/11/2008";
      sa[507] = "12/11/2009";
      sa[508] = "12/11/2010";
      sa[509] = "12/12/2007";
      sa[510] = "12/12/2008";
      sa[511] = "12/12/2009";
      sa[512] = "12/12/2010";
      sa[513] = "12/12/2011";
      sa[514] = "13/01/2008";
      sa[515] = "13/01/2009";
      sa[516] = "13/01/2010";
      sa[517] = "13/01/2011";
      sa[518] = "13/01/2012";
      sa[519] = "13/02/2008";
      sa[520] = "13/02/2009";
      sa[521] = "13/02/2010";
      sa[522] = "13/03/2008";
      sa[523] = "13/03/2009";
      sa[524] = "13/03/2010";
      sa[525] = "13/04/2007";
      sa[526] = "13/04/2010";
      sa[527] = "13/04/2011";
      sa[528] = "13/05/2008";
      sa[529] = "13/05/2009";
      sa[530] = "13/05/2010";
      sa[531] = "13/05/2011";
      sa[532] = "13/06/2009";
      sa[533] = "13/06/2010";
      sa[534] = "13/06/2011";
      sa[535] = "13/07/2009";
      sa[536] = "13/07/2010";
      sa[537] = "13/07/2011";
      sa[538] = "13/08/2008";
      sa[539] = "13/08/2009";
      sa[540] = "13/08/2010";
      sa[541] = "13/09/2008";
      sa[542] = "13/09/2010";
      sa[543] = "13/09/2011";
      sa[544] = "13/10/2009";
      sa[545] = "13/10/2010";
      sa[546] = "13/10/2011";
      sa[547] = "13/11/2007";
      sa[548] = "13/11/2008";
      sa[549] = "13/11/2009";
      sa[550] = "13/11/2010";
      sa[551] = "13/12/2007";
      sa[552] = "13/12/2008";
      sa[553] = "13/12/2009";
      sa[554] = "13/12/2010";
      sa[555] = "13/12/2011";
      sa[556] = "14/01/2008";
      sa[557] = "14/01/2009";
      sa[558] = "14/01/2010";
      sa[559] = "14/01/2011";
      sa[560] = "14/02/2008";
      sa[561] = "14/02/2009";
      sa[562] = "14/02/2010";
      sa[563] = "14/02/2011";
      sa[564] = "14/02/2012";
      sa[565] = "14/03/2008";
      sa[566] = "14/03/2009";
      sa[567] = "14/03/2010";
      sa[568] = "14/03/2011";
      sa[569] = "14/04/2008";
      sa[570] = "14/04/2009";
      sa[571] = "14/04/2010";
      sa[572] = "14/04/2011";
      sa[573] = "14/05/2009";
      sa[574] = "14/05/2010";
      sa[575] = "14/06/2008";
      sa[576] = "14/06/2009";
      sa[577] = "14/06/2010";
      sa[578] = "14/07/2009";
      sa[579] = "14/07/2010";
      sa[580] = "14/07/2011";
      sa[581] = "14/08/2009";
      sa[582] = "14/08/2010";
      sa[583] = "14/09/2009";
      sa[584] = "14/09/2010";
      sa[585] = "14/10/2009";
      sa[586] = "14/10/2010";
      sa[587] = "14/10/2011";
      sa[588] = "14/11/2007";
      sa[589] = "14/11/2008";
      sa[590] = "14/11/2009";
      sa[591] = "14/11/2010";
      sa[592] = "14/12/2008";
      sa[593] = "14/12/2009";
      sa[594] = "14/12/2010";
      sa[595] = "14/12/2011";
      sa[596] = "15/01/2008";
      sa[597] = "15/01/2009";
      sa[598] = "15/01/2010";
      sa[599] = "15/01/2011";
      sa[600] = "15/02/2008";
      sa[601] = "15/02/2009";
      sa[602] = "15/02/2010";
      sa[603] = "15/02/2011";
      sa[604] = "15/02/2012";
      sa[605] = "15/03/2008";
      sa[606] = "15/03/2009";
      sa[607] = "15/03/2010";
      sa[608] = "15/03/2011";
      sa[609] = "15/04/2008";
      sa[610] = "15/04/2009";
      sa[611] = "15/04/2010";
      sa[612] = "15/04/2011";
      sa[613] = "15/05/2008";
      sa[614] = "15/05/2009";
      sa[615] = "15/05/2010";
      sa[616] = "15/06/2009";
      sa[617] = "15/06/2010";
      sa[618] = "15/07/2009";
      sa[619] = "15/07/2010";
      sa[620] = "15/08/2009";
      sa[621] = "15/09/2008";
      sa[622] = "15/09/2009";
      sa[623] = "15/09/2010";
      sa[624] = "15/09/2011";
      sa[625] = "15/10/2008";
      sa[626] = "15/10/2009";
      sa[627] = "15/10/2010";
      sa[628] = "15/11/2007";
      sa[629] = "15/11/2008";
      sa[630] = "15/11/2009";
      sa[631] = "15/11/2010";
      sa[632] = "15/11/2011";
      sa[633] = "15/12/2007";
      sa[634] = "15/12/2008";
      sa[635] = "15/12/2009";
      sa[636] = "15/12/2010";
      sa[637] = "15/12/2011";
      sa[638] = "16/01/2008";
      sa[639] = "16/01/2009";
      sa[640] = "16/01/2010";
      sa[641] = "16/01/2011";
      sa[642] = "16/02/2008";
      sa[643] = "16/02/2009";
      sa[644] = "16/02/2010";
      sa[645] = "16/02/2011";
      sa[646] = "16/03/2009";
      sa[647] = "16/03/2010";
      sa[648] = "16/03/2011";
      sa[649] = "16/04/2008";
      sa[650] = "16/04/2009";
      sa[651] = "16/04/2010";
      sa[652] = "16/05/2010";
      sa[653] = "16/05/2011";
      sa[654] = "16/06/2008";
      sa[655] = "16/06/2009";
      sa[656] = "16/06/2010";
      sa[657] = "16/06/2011";
      sa[658] = "16/07/2008";
      sa[659] = "16/07/2009";
      sa[660] = "16/07/2010";
      sa[661] = "16/07/2011";
      sa[662] = "16/08/2010";
      sa[663] = "16/08/2011";
      sa[664] = "16/09/2008";
      sa[665] = "16/09/2009";
      sa[666] = "16/09/2010";
      sa[667] = "16/09/2011";
      sa[668] = "16/10/2008";
      sa[669] = "16/10/2009";
      sa[670] = "16/10/2010";
      sa[671] = "16/11/2008";
      sa[672] = "16/11/2009";
      sa[673] = "16/11/2010";
      sa[674] = "16/11/2011";
      sa[675] = "16/12/2007";
      sa[676] = "16/12/2008";
      sa[677] = "16/12/2009";
      sa[678] = "16/12/2010";
      sa[679] = "16/12/2011";
      sa[680] = "17/01/2008";
      sa[681] = "17/01/2009";
      sa[682] = "17/01/2010";
      sa[683] = "17/01/2011";
      sa[684] = "17/01/2012";
      sa[685] = "17/02/2008";
      sa[686] = "17/02/2009";
      sa[687] = "17/02/2010";
      sa[688] = "17/02/2011";
      sa[689] = "17/03/2008";
      sa[690] = "17/03/2009";
      sa[691] = "17/03/2010";
      sa[692] = "17/03/2011";
      sa[693] = "17/04/2009";
      sa[694] = "17/04/2010";
      sa[695] = "17/05/2010";
      sa[696] = "17/05/2011";
      sa[697] = "17/06/2008";
      sa[698] = "17/06/2009";
      sa[699] = "17/06/2010";
      sa[700] = "17/06/2011";
      sa[701] = "17/07/2008";
      sa[702] = "17/07/2009";
      sa[703] = "17/07/2010";
      sa[704] = "17/08/2009";
      sa[705] = "17/08/2010";
      sa[706] = "17/08/2011";
      sa[707] = "17/09/2008";
      sa[708] = "17/09/2009";
      sa[709] = "17/09/2010";
      sa[710] = "17/10/2008";
      sa[711] = "17/10/2009";
      sa[712] = "17/10/2011";
      sa[713] = "17/11/2007";
      sa[714] = "17/11/2008";
      sa[715] = "17/11/2009";
      sa[716] = "17/11/2010";
      sa[717] = "17/11/2011";
      sa[718] = "17/12/2006";
      sa[719] = "17/12/2007";
      sa[720] = "17/12/2008";
      sa[721] = "17/12/2009";
      sa[722] = "17/12/2010";
      sa[723] = "17/12/2011";
      sa[724] = "18/01/2008";
      sa[725] = "18/01/2009";
      sa[726] = "18/01/2010";
      sa[727] = "18/01/2011";
      sa[728] = "18/01/2012";
      sa[729] = "18/02/2008";
      sa[730] = "18/02/2009";
      sa[731] = "18/02/2010";
      sa[732] = "18/02/2011";
      sa[733] = "18/03/2008";
      sa[734] = "18/03/2009";
      sa[735] = "18/03/2010";
      sa[736] = "18/03/2011";
      sa[737] = "18/04/2011";
      sa[738] = "18/05/2009";
      sa[739] = "18/05/2010";
      sa[740] = "18/05/2011";
      sa[741] = "18/06/2008";
      sa[742] = "18/06/2009";
      sa[743] = "18/06/2010";
      sa[744] = "18/07/2008";
      sa[745] = "18/07/2009";
      sa[746] = "18/07/2010";
      sa[747] = "18/07/2011";
      sa[748] = "18/08/2008";
      sa[749] = "18/08/2009";
      sa[750] = "18/08/2010";
      sa[751] = "18/08/2011";
      sa[752] = "18/09/2008";
      sa[753] = "18/09/2009";
      sa[754] = "18/09/2010";
      sa[755] = "18/10/2008";
      sa[756] = "18/10/2010";
      sa[757] = "18/10/2011";
      sa[758] = "18/11/2007";
      sa[759] = "18/11/2008";
      sa[760] = "18/11/2009";
      sa[761] = "18/11/2010";
      sa[762] = "18/11/2011";
      sa[763] = "18/12/2007";
      sa[764] = "18/12/2008";
      sa[765] = "18/12/2009";
      sa[766] = "18/12/2010";
      sa[767] = "19/01/2008";
      sa[768] = "19/01/2009";
      sa[769] = "19/01/2010";
      sa[770] = "19/01/2011";
      sa[771] = "19/02/2008";
      sa[772] = "19/02/2009";
      sa[773] = "19/02/2010";
      sa[774] = "19/02/2011";
      sa[775] = "19/03/2008";
      sa[776] = "19/03/2009";
      sa[777] = "19/03/2010";
      sa[778] = "19/03/2011";
      sa[779] = "19/04/2008";
      sa[780] = "19/04/2010";
      sa[781] = "19/05/2009";
      sa[782] = "19/05/2010";
      sa[783] = "19/06/2009";
      sa[784] = "19/06/2010";
      sa[785] = "19/07/2010";
      sa[786] = "19/07/2011";
      sa[787] = "19/08/2009";
      sa[788] = "19/08/2010";
      sa[789] = "19/08/2011";
      sa[790] = "19/09/2008";
      sa[791] = "19/09/2009";
      sa[792] = "19/09/2010";
      sa[793] = "19/09/2011";
      sa[794] = "19/10/2009";
      sa[795] = "19/10/2010";
      sa[796] = "19/10/2011";
      sa[797] = "19/11/2007";
      sa[798] = "19/11/2008";
      sa[799] = "19/11/2009";
      sa[800] = "19/11/2010";
      sa[801] = "19/11/2011";
      sa[802] = "19/12/2007";
      sa[803] = "19/12/2008";
      sa[804] = "19/12/2009";
      sa[805] = "19/12/2010";
      sa[806] = "20/01/2007";
      sa[807] = "20/01/2008";
      sa[808] = "20/01/2009";
      sa[809] = "20/01/2010";
      sa[810] = "20/01/2011";
      sa[811] = "20/01/2012";
      sa[812] = "20/02/2008";
      sa[813] = "20/02/2009";
      sa[814] = "20/02/2010";
      sa[815] = "20/02/2011";
      sa[816] = "20/02/2012";
      sa[817] = "20/03/2007";
      sa[818] = "20/03/2008";
      sa[819] = "20/03/2009";
      sa[820] = "20/03/2010";
      sa[821] = "20/04/2009";
      sa[822] = "20/04/2010";
      sa[823] = "20/05/2009";
      sa[824] = "20/05/2010";
      sa[825] = "20/05/2011";
      sa[826] = "20/06/2008";
      sa[827] = "20/06/2009";
      sa[828] = "20/06/2010";
      sa[829] = "20/06/2011";
      sa[830] = "20/07/2009";
      sa[831] = "20/07/2010";
      sa[832] = "20/07/2011";
      sa[833] = "20/08/2008";
      sa[834] = "20/08/2009";
      sa[835] = "20/08/2010";
      sa[836] = "20/09/2008";
      sa[837] = "20/09/2010";
      sa[838] = "20/09/2011";
      sa[839] = "20/10/2008";
      sa[840] = "20/10/2009";
      sa[841] = "20/10/2010";
      sa[842] = "20/10/2011";
      sa[843] = "20/11/2007";
      sa[844] = "20/11/2008";
      sa[845] = "20/11/2009";
      sa[846] = "20/11/2010";
      sa[847] = "20/12/2007";
      sa[848] = "20/12/2008";
      sa[849] = "20/12/2009";
      sa[850] = "20/12/2010";
      sa[851] = "20/12/2011";
      sa[852] = "21/01/2008";
      sa[853] = "21/01/2009";
      sa[854] = "21/01/2010";
      sa[855] = "21/01/2011";
      sa[856] = "21/01/2012";
      sa[857] = "21/02/2008";
      sa[858] = "21/02/2009";
      sa[859] = "21/02/2010";
      sa[860] = "21/02/2011";
      sa[861] = "21/02/2012";
      sa[862] = "21/03/2009";
      sa[863] = "21/03/2011";
      sa[864] = "21/04/2008";
      sa[865] = "21/04/2009";
      sa[866] = "21/04/2010";
      sa[867] = "21/04/2011";
      sa[868] = "21/05/2008";
      sa[869] = "21/05/2009";
      sa[870] = "21/05/2010";
      sa[871] = "21/06/2008";
      sa[872] = "21/06/2009";
      sa[873] = "21/06/2010";
      sa[874] = "21/06/2011";
      sa[875] = "21/07/2008";
      sa[876] = "21/07/2009";
      sa[877] = "21/07/2010";
      sa[878] = "21/08/2008";
      sa[879] = "21/08/2009";
      sa[880] = "21/08/2010";
      sa[881] = "21/09/2009";
      sa[882] = "21/09/2010";
      sa[883] = "21/09/2011";
      sa[884] = "21/10/2008";
      sa[885] = "21/10/2009";
      sa[886] = "21/10/2010";
      sa[887] = "21/10/2011";
      sa[888] = "21/11/2007";
      sa[889] = "21/11/2008";
      sa[890] = "21/11/2009";
      sa[891] = "21/11/2010";
      sa[892] = "21/11/2011";
      sa[893] = "21/12/2007";
      sa[894] = "21/12/2008";
      sa[895] = "21/12/2009";
      sa[896] = "21/12/2010";
      sa[897] = "21/12/2011";
      sa[898] = "22/01/2008";
      sa[899] = "22/01/2009";
      sa[900] = "22/01/2010";
      sa[901] = "22/01/2011";
      sa[902] = "22/02/2008";
      sa[903] = "22/02/2009";
      sa[904] = "22/02/2010";
      sa[905] = "22/02/2011";
      sa[906] = "22/02/2012";
      sa[907] = "22/03/2008";
      sa[908] = "22/03/2010";
      sa[909] = "22/03/2011";
      sa[910] = "22/04/2009";
      sa[911] = "22/04/2010";
      sa[912] = "22/05/2008";
      sa[913] = "22/05/2009";
      sa[914] = "22/05/2010";
      sa[915] = "22/06/2008";
      sa[916] = "22/06/2009";
      sa[917] = "22/06/2010";
      sa[918] = "22/06/2011";
      sa[919] = "22/07/2008";
      sa[920] = "22/07/2009";
      sa[921] = "22/07/2010";
      sa[922] = "22/07/2011";
      sa[923] = "22/08/2008";
      sa[924] = "22/08/2009";
      sa[925] = "22/08/2011";
      sa[926] = "22/09/2008";
      sa[927] = "22/09/2009";
      sa[928] = "22/09/2010";
      sa[929] = "22/09/2011";
      sa[930] = "22/10/2009";
      sa[931] = "22/10/2010";
      sa[932] = "22/11/2008";
      sa[933] = "22/11/2009";
      sa[934] = "22/11/2010";
      sa[935] = "22/11/2011";
      sa[936] = "22/12/2007";
      sa[937] = "22/12/2008";
      sa[938] = "22/12/2009";
      sa[939] = "22/12/2010";
      sa[940] = "22/12/2011";
      sa[941] = "23/01/2008";
      sa[942] = "23/01/2009";
      sa[943] = "23/01/2010";
      sa[944] = "23/01/2012";
      sa[945] = "23/02/2008";
      sa[946] = "23/02/2009";
      sa[947] = "23/02/2010";
      sa[948] = "23/02/2011";
      sa[949] = "23/03/2009";
      sa[950] = "23/03/2010";
      sa[951] = "23/03/2011";
      sa[952] = "23/04/2008";
      sa[953] = "23/04/2009";
      sa[954] = "23/04/2010";
      sa[955] = "23/04/2011";
      sa[956] = "23/05/2009";
      sa[957] = "23/06/2008";
      sa[958] = "23/06/2009";
      sa[959] = "23/06/2010";
      sa[960] = "23/06/2011";
      sa[961] = "23/07/2009";
      sa[962] = "23/07/2010";
      sa[963] = "23/08/2008";
      sa[964] = "23/08/2009";
      sa[965] = "23/08/2010";
      sa[966] = "23/08/2011";
      sa[967] = "23/09/2008";
      sa[968] = "23/09/2009";
      sa[969] = "23/09/2010";
      sa[970] = "23/10/2009";
      sa[971] = "23/10/2010";
      sa[972] = "23/11/2007";
      sa[973] = "23/11/2008";
      sa[974] = "23/11/2009";
      sa[975] = "23/11/2010";
      sa[976] = "23/11/2011";
      sa[977] = "23/12/2007";
      sa[978] = "23/12/2008";
      sa[979] = "23/12/2009";
      sa[980] = "23/12/2010";
      sa[981] = "23/12/2011";
      sa[982] = "24/01/2007";
      sa[983] = "24/01/2008";
      sa[984] = "24/01/2009";
      sa[985] = "24/01/2010";
      sa[986] = "24/01/2011";
      sa[987] = "24/01/2012";
      sa[988] = "24/02/2008";
      sa[989] = "24/02/2009";
      sa[990] = "24/02/2010";
      sa[991] = "24/02/2011";
      sa[992] = "24/03/2008";
      sa[993] = "24/03/2009";
      sa[994] = "24/03/2010";
      sa[995] = "24/03/2011";
      sa[996] = "24/04/2008";
      sa[997] = "24/04/2009";
      sa[998] = "24/04/2010";
      sa[999] = "24/05/2009";
      sa[1000] = "24/05/2010";
      sa[1001] = "24/06/2008";
      sa[1002] = "24/06/2009";
      sa[1003] = "24/06/2010";
      sa[1004] = "24/06/2011";
      sa[1005] = "24/07/2008";
      sa[1006] = "24/07/2009";
      sa[1007] = "24/07/2010";
      sa[1008] = "24/08/2009";
      sa[1009] = "24/08/2010";
      sa[1010] = "24/09/2008";
      sa[1011] = "24/09/2009";
      sa[1012] = "24/09/2010";
      sa[1013] = "24/09/2011";
      sa[1014] = "24/10/2008";
      sa[1015] = "24/10/2009";
      sa[1016] = "24/10/2011";
      sa[1017] = "24/11/2007";
      sa[1018] = "24/11/2008";
      sa[1019] = "24/11/2009";
      sa[1020] = "24/11/2010";
      sa[1021] = "24/11/2011";
      sa[1022] = "24/12/2007";
      sa[1023] = "24/12/2008";
      sa[1024] = "24/12/2009";
      sa[1025] = "24/12/2010";
      sa[1026] = "25/01/2008";
      sa[1027] = "25/01/2009";
      sa[1028] = "25/01/2010";
      sa[1029] = "25/01/2011";
      sa[1030] = "25/01/2012";
      sa[1031] = "25/02/2008";
      sa[1032] = "25/02/2009";
      sa[1033] = "25/02/2010";
      sa[1034] = "25/02/2011";
      sa[1035] = "25/03/2008";
      sa[1036] = "25/03/2009";
      sa[1037] = "25/03/2010";
      sa[1038] = "25/03/2011";
      sa[1039] = "25/04/2008";
      sa[1040] = "25/04/2009";
      sa[1041] = "25/05/2010";
      sa[1042] = "25/05/2011";
      sa[1043] = "25/06/2009";
      sa[1044] = "25/06/2010";
      sa[1045] = "25/07/2008";
      sa[1046] = "25/07/2009";
      sa[1047] = "25/07/2010";
      sa[1048] = "25/07/2011";
      sa[1049] = "25/08/2009";
      sa[1050] = "25/08/2010";
      sa[1051] = "25/08/2011";
      sa[1052] = "25/09/2008";
      sa[1053] = "25/09/2009";
      sa[1054] = "25/09/2010";
      sa[1055] = "25/10/2008";
      sa[1056] = "25/10/2010";
      sa[1057] = "25/10/2011";
      sa[1058] = "25/11/2007";
      sa[1059] = "25/11/2008";
      sa[1060] = "25/11/2009";
      sa[1061] = "25/11/2010";
      sa[1062] = "25/11/2011";
      sa[1063] = "25/12/2007";
      sa[1064] = "25/12/2008";
      sa[1065] = "25/12/2009";
      sa[1066] = "25/12/2010";
      sa[1067] = "26/01/2007";
      sa[1068] = "26/01/2008";
      sa[1069] = "26/01/2009";
      sa[1070] = "26/01/2010";
      sa[1071] = "26/01/2011";
      sa[1072] = "26/01/2012";
      sa[1073] = "26/02/2008";
      sa[1074] = "26/02/2009";
      sa[1075] = "26/02/2010";
      sa[1076] = "26/02/2011";
      sa[1077] = "26/03/2007";
      sa[1078] = "26/03/2008";
      sa[1079] = "26/03/2009";
      sa[1080] = "26/03/2010";
      sa[1081] = "26/03/2011";
      sa[1082] = "26/04/2010";
      sa[1083] = "26/04/2011";
      sa[1084] = "26/05/2009";
      sa[1085] = "26/05/2010";
      sa[1086] = "26/05/2011";
      sa[1087] = "26/06/2008";
      sa[1088] = "26/06/2009";
      sa[1089] = "26/06/2010";
      sa[1090] = "26/07/2010";
      sa[1091] = "26/08/2008";
      sa[1092] = "26/08/2009";
      sa[1093] = "26/08/2010";
      sa[1094] = "26/09/2008";
      sa[1095] = "26/09/2009";
      sa[1096] = "26/09/2011";
      sa[1097] = "26/10/2009";
      sa[1098] = "26/10/2010";
      sa[1099] = "26/10/2011";
      sa[1100] = "26/11/2007";
      sa[1101] = "26/11/2008";
      sa[1102] = "26/11/2009";
      sa[1103] = "26/11/2010";
      sa[1104] = "26/12/2008";
      sa[1105] = "26/12/2009";
      sa[1106] = "27/01/2008";
      sa[1107] = "27/01/2009";
      sa[1108] = "27/01/2010";
      sa[1109] = "27/01/2011";
      sa[1110] = "27/01/2012";
      sa[1111] = "27/02/2008";
      sa[1112] = "27/02/2009";
      sa[1113] = "27/02/2010";
      sa[1114] = "27/02/2011";
      sa[1115] = "27/03/2008";
      sa[1116] = "27/03/2009";
      sa[1117] = "27/03/2010";
      sa[1118] = "27/04/2009";
      sa[1119] = "27/04/2010";
      sa[1120] = "27/05/2008";
      sa[1121] = "27/05/2009";
      sa[1122] = "27/05/2010";
      sa[1123] = "27/05/2011";
      sa[1124] = "27/06/2008";
      sa[1125] = "27/06/2009";
      sa[1126] = "27/06/2011";
      sa[1127] = "27/07/2009";
      sa[1128] = "27/07/2010";
      sa[1129] = "27/08/2009";
      sa[1130] = "27/08/2010";
      sa[1131] = "27/08/2011";
      sa[1132] = "27/09/2009";
      sa[1133] = "27/09/2010";
      sa[1134] = "27/09/2011";
      sa[1135] = "27/10/2008";
      sa[1136] = "27/10/2009";
      sa[1137] = "27/10/2010";
      sa[1138] = "27/10/2011";
      sa[1139] = "27/11/2007";
      sa[1140] = "27/11/2008";
      sa[1141] = "27/11/2009";
      sa[1142] = "27/11/2010";
      sa[1143] = "27/12/2007";
      sa[1144] = "27/12/2008";
      sa[1145] = "27/12/2009";
      sa[1146] = "27/12/2010";
      sa[1147] = "28/01/2008";
      sa[1148] = "28/01/2009";
      sa[1149] = "28/01/2010";
      sa[1150] = "28/01/2011";
      sa[1151] = "28/02/2008";
      sa[1152] = "28/02/2009";
      sa[1153] = "28/02/2010";
      sa[1154] = "28/02/2011";
      sa[1155] = "28/03/2008";
      sa[1156] = "28/03/2009";
      sa[1157] = "28/03/2010";
      sa[1158] = "28/03/2011";
      sa[1159] = "28/04/2008";
      sa[1160] = "28/04/2009";
      sa[1161] = "28/04/2010";
      sa[1162] = "28/04/2011";
      sa[1163] = "28/05/2008";
      sa[1164] = "28/05/2009";
      sa[1165] = "28/05/2010";
      sa[1166] = "28/06/2008";
      sa[1167] = "28/06/2010";
      sa[1168] = "28/06/2011";
      sa[1169] = "28/07/2008";
      sa[1170] = "28/07/2009";
      sa[1171] = "28/07/2010";
      sa[1172] = "28/08/2009";
      sa[1173] = "28/08/2010";
      sa[1174] = "28/09/2009";
      sa[1175] = "28/09/2010";
      sa[1176] = "28/09/2011";
      sa[1177] = "28/10/2008";
      sa[1178] = "28/10/2009";
      sa[1179] = "28/10/2010";
      sa[1180] = "28/10/2011";
      sa[1181] = "28/11/2007";
      sa[1182] = "28/11/2008";
      sa[1183] = "28/11/2009";
      sa[1184] = "28/11/2010";
      sa[1185] = "28/11/2011";
      sa[1186] = "28/12/2007";
      sa[1187] = "28/12/2008";
      sa[1188] = "28/12/2009";
      sa[1189] = "28/12/2010";
      sa[1190] = "28/12/2011";
      sa[1191] = "29/01/2008";
      sa[1192] = "29/01/2009";
      sa[1193] = "29/01/2010";
      sa[1194] = "29/01/2011";
      sa[1195] = "29/02/2008";
      sa[1196] = "29/03/2008";
      sa[1197] = "29/03/2009";
      sa[1198] = "29/03/2010";
      sa[1199] = "29/03/2011";
      sa[1200] = "29/04/2009";
      sa[1201] = "29/04/2010";
      sa[1202] = "29/05/2009";
      sa[1203] = "29/05/2010";
      sa[1204] = "29/06/2008";
      sa[1205] = "29/06/2009";
      sa[1206] = "29/06/2010";
      sa[1207] = "29/07/2009";
      sa[1208] = "29/07/2010";
      sa[1209] = "29/07/2011";
      sa[1210] = "29/08/2008";
      sa[1211] = "29/08/2009";
      sa[1212] = "29/09/2009";
      sa[1213] = "29/09/2010";
      sa[1214] = "29/09/2011";
      sa[1215] = "29/10/2008";
      sa[1216] = "29/10/2009";
      sa[1217] = "29/10/2010";
      sa[1218] = "29/11/2007";
      sa[1219] = "29/11/2008";
      sa[1220] = "29/11/2009";
      sa[1221] = "29/11/2010";
      sa[1222] = "29/11/2011";
      sa[1223] = "29/12/2007";
      sa[1224] = "29/12/2008";
      sa[1225] = "29/12/2009";
      sa[1226] = "29/12/2010";
      sa[1227] = "29/12/2011";
      sa[1228] = "30/01/2008";
      sa[1229] = "30/01/2009";
      sa[1230] = "30/01/2010";
      sa[1231] = "30/01/2011";
      sa[1232] = "30/01/2012";
      sa[1233] = "30/03/2008";
      sa[1234] = "30/03/2009";
      sa[1235] = "30/03/2010";
      sa[1236] = "30/03/2011";
      sa[1237] = "30/04/2008";
      sa[1238] = "30/04/2009";
      sa[1239] = "30/04/2010";
      sa[1240] = "30/05/2009";
      sa[1241] = "30/05/2010";
      sa[1242] = "30/06/2008";
      sa[1243] = "30/06/2009";
      sa[1244] = "30/06/2010";
      sa[1245] = "30/07/2008";
      sa[1246] = "30/07/2009";
      sa[1247] = "30/07/2010";
      sa[1248] = "30/08/2009";
      sa[1249] = "30/09/2009";
      sa[1250] = "30/09/2010";
      sa[1251] = "30/09/2011";
      sa[1252] = "30/10/2008";
      sa[1253] = "30/10/2009";
      sa[1254] = "30/10/2010";
      sa[1255] = "30/11/2007";
      sa[1256] = "30/11/2008";
      sa[1257] = "30/11/2009";
      sa[1258] = "30/11/2010";
      sa[1259] = "30/11/2011";
      sa[1260] = "30/12/2007";
      sa[1261] = "30/12/2008";
      sa[1262] = "30/12/2009";
      sa[1263] = "30/12/2010";
      sa[1264] = "30/12/2011";
      sa[1265] = "31/01/2008";
      sa[1266] = "31/01/2009";
      sa[1267] = "31/01/2010";
      sa[1268] = "31/01/2011";
      sa[1269] = "31/03/2008";
      sa[1270] = "31/03/2009";
      sa[1271] = "31/03/2010";
      sa[1272] = "31/03/2011";
      sa[1273] = "31/05/2010";
      sa[1274] = "31/05/2011";
      sa[1275] = "31/07/2008";
      sa[1276] = "31/07/2009";
      sa[1277] = "31/07/2010";
      sa[1278] = "31/08/2009";
      sa[1279] = "31/08/2010";
      sa[1280] = "31/10/2009";
      sa[1281] = "31/10/2010";
      sa[1282] = "31/10/2011";
      sa[1283] = "31/12/2007";
      sa[1284] = "31/12/2008";
      sa[1285] = "31/12/2009";
      sa[1286] = "31/12/2010";
    }
  }
}
// The class representing column POL_STATUS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_59 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_59_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_59_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Cancelled";
      sa[1] = "Lapsed";
      sa[2] = "Live";
      sa[3] = "Unknown";
    }
  }
}
// The class representing column CLAIM3YEARS
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_61 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_61_0.fill(VALUES);
  }
  static final class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_ColInfo_61_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}

class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_0_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        0.5392836f : 
                        0.74538696f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.84968793f : 
                        0.45282656f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 16.515078f ? 
                     (data[0 /* COVER_START */] < 1.15556758E12f ? 
                        0.79513156f : 
                        0.25302497f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.6352961f : 
                        0.3228904f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 65.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.5776321f : 
                        0.6859033f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        0.089722134f : 
                        0.40636346f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 27.5f ? 
                        0.068606704f : 
                        0.54084784f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.073223576f : 
                        -0.10988561f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                        -0.10968558f : 
                        -7.07259E-4f) : 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 124.580315f ? 
                        -0.11097749f : 
                        -0.10329677f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 93.50938f ? 
                        0.041840002f : 
                        0.7617392f) : 
                     (data[56 /* MTA_APRP */] < 95.25375f ? 
                        -0.007398967f : 
                        0.36390984f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[60 /* i */] < 8127.5f ? 
                        -0.006414878f : 
                        -0.110029876f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.2169249f : 
                        -0.10622906f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.13968381f : 
                        -0.104293264f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        -0.06631933f : 
                        -0.11230779f)))));
    return pred;
  } // constant pool size = 141B, number of visited nodes = 31, static init size = 90B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00111100 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {60, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_1_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (!Double.isNaN(data[10]) ? 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                 (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.41452798f : 
                        0.35886002f) : 
                     (data[0 /* COVER_START */] < 1.19530075E12f ? 
                        0.4805752f : 
                        0.24712393f)) : 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (data[56 /* MTA_APRP */] < 149.12079f ? 
                        0.062715806f : 
                        0.25924793f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        0.016675945f : 
                        0.32054687f))) : 
            -0.024678955f) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.100008145f : 
                        0.0056889453f) : 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 124.580315f ? 
                        -0.10942416f : 
                        -0.101202555f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 93.50938f ? 
                        0.036403783f : 
                        0.39504772f) : 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.32678503f : 
                        0.09037364f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[60 /* i */] < 4127.5f ? 
                        0.060999893f : 
                        -0.10811559f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.16446276f : 
                        -0.10432933f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.11244497f : 
                        -0.10226349f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        -0.06301645f : 
                        -0.11085851f)))));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 24, static init size = 60B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00111000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {28, 1, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_2_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.31039694f : 
                        0.21268785f) : 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        0.17388533f : 
                        0.26461267f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 16.515078f ? 
                     (data[0 /* COVER_START */] < 1.15556758E12f ? 
                        0.29513964f : 
                        0.14263782f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.28024828f : 
                        0.20040494f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 65.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 7.0534377f ? 
                        0.2734945f : 
                        0.20772475f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        0.056394003f : 
                        0.20106548f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 27.5f ? 
                        0.061680626f : 
                        0.3315357f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.06885356f : 
                        -0.10789711f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.106620364f : 
                        1.2275764E-5f) : 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 88.8375f ? 
                        -0.1072943f : 
                        -0.046554007f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.25677574f : 
                        0.30845875f) : 
                     (!Double.isNaN(data[57]) && (data[57] < 1287)  ? 
                        0.32314113f : 
                        0.11595012f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[60 /* i */] < 8127.5f ? 
                        -0.0016286992f : 
                        -0.10691354f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.1310125f : 
                        -0.10252653f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[0 /* COVER_START */] < 1.24433282E12f ? 
                        0.2224324f : 
                        -0.02198718f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        -0.05976635f : 
                        -0.109564275f)))));
    return pred;
  } // constant pool size = 134B, number of visited nodes = 31, static init size = 60B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00111100 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {60, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_3_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.2510206f : 
                        0.17160955f) : 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        0.14238672f : 
                        0.21306288f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 12.068711f ? 
                     (data[0 /* COVER_START */] < 1.16843047E12f ? 
                        0.24449962f : 
                        0.11314113f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.22019756f : 
                        0.16291311f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 65.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 27.408125f ? 
                        0.21750218f : 
                        0.16693938f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.008617739f : 
                        0.13725518f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 27.5f ? 
                        0.052853238f : 
                        0.24247667f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.065650426f : 
                        -0.106416136f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.10519328f : 
                        1.1059117E-5f) : 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                        -0.10925216f : 
                        -0.10412019f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 93.50938f ? 
                        0.0018425033f : 
                        0.23384903f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        0.06414404f : 
                        0.22254296f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[60 /* i */] < 4127.5f ? 
                        0.052487586f : 
                        -0.10518807f) : 
                     (data[0 /* COVER_START */] < 1.23126756E12f ? 
                        0.23882021f : 
                        -0.010647134f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.08561483f : 
                        -0.10006929f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        -0.05657137f : 
                        -0.10840258f)))));
    return pred;
  } // constant pool size = 141B, number of visited nodes = 31, static init size = 90B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00111100 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {60, 3, 0, 0};
  // {10111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {93, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_4_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.19530075E12f ? 
                        0.21753234f : 
                        0.1688133f) : 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        0.11967308f : 
                        0.17943391f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 12.068711f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        0.02423273f : 
                        0.1204905f) : 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                        0.11931818f : 
                        0.20518877f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 65.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                        0.14912395f : 
                        0.18771847f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.12297428f : 
                        -0.0039797714f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 146.8111f ? 
                        0.048796374f : 
                        0.22259295f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 214.28531f ? 
                        -0.10366172f : 
                        -0.04099545f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                        -0.09414165f : 
                        0.005094065f) : 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 124.580315f ? 
                        -0.10553559f : 
                        -0.09496661f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.17509596f : 
                        0.21226443f) : 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.16862749f : 
                        0.040312424f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[60 /* i */] < 8127.5f ? 
                        0.002515858f : 
                        -0.10422941f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.097422786f : 
                        -0.10061849f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[0 /* COVER_START */] < 1.24433282E12f ? 
                        0.15512991f : 
                        -0.020827651f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.10773616f : 
                        -0.10578028f)))));
    return pred;
  } // constant pool size = 151B, number of visited nodes = 31, static init size = 150B
  // {00001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {00111000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {28, 1, 0, 0};
  // {00100000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_5_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 57.89422f ? 
                        0.13216156f : 
                        0.1821196f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.195172f : 
                        0.11179514f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 12.068711f ? 
                     (data[37 /* YEARBUILT */] < 1881.5f ? 
                        0.26420453f : 
                        0.0777931f) : 
                     (!Double.isNaN(data[38 /* PAYMENT_METHOD */]) && (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[38])) ? 
                        0.08165298f : 
                        0.16412692f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 65.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 25.282812f ? 
                        0.14383887f : 
                        0.18729785f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -3.4686389E-7f : 
                        0.10331696f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (data[57 /* MTA_DATE */] < 1099.5f ? 
                        0.18776986f : 
                        0.041821443f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.05731025f : 
                        -0.10377238f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 277.6907f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.048510544f : 
                        -0.10336285f) : 
                     (!Double.isNaN(data[43]) && (data[43] < 2)  ? 
                        -0.10832501f : 
                        0.11734421f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 39.37875f ? 
                        0.1796778f : 
                        0.12792838f) : 
                     (data[56 /* MTA_APRP */] < 95.25375f ? 
                        -0.05000956f : 
                        0.12038633f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[2 /* P1_PT_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 9) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 9) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                        -0.10241707f : 
                        0.09838464f) : 
                     (data[0 /* COVER_START */] < 1.23126756E12f ? 
                        0.1652588f : 
                        -0.011264388f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.06791274f : 
                        -0.09795862f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        -0.04716162f : 
                        -0.10640339f)))));
    return pred;
  } // constant pool size = 144B, number of visited nodes = 31, static init size = 120B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {5, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_6_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 57.89422f ? 
                        0.11662678f : 
                        0.16182524f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.17708392f : 
                        0.084192365f)) : 
                 (data[0 /* COVER_START */] < 1.16097837E12f ? 
                     (data[60 /* i */] < 33996.5f ? 
                        0.13269015f : 
                        0.20950599f) : 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[35])) ? 
                        0.038469404f : 
                        0.10338087f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 65.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.11518675f : 
                        0.14580156f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.094257824f : 
                        -0.009778534f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.1196675f : 
                        -0.012554946f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 214.28531f ? 
                        -0.10089985f : 
                        -0.031194888f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 277.6907f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.045503996f : 
                        -0.102217145f) : 
                     (data[56 /* MTA_APRP */] < 285.76297f ? 
                        0.22209762f : 
                        0.011854816f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.13440353f : 
                        0.16786107f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        0.032080337f : 
                        0.1411966f))) : 
             (data[60 /* i */] < 2002.5f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[60 /* i */] < 939.5f ? 
                        0.12105418f : 
                        0.39149934f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.24650842f : 
                        -0.09157055f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.10119709f : 
                        0.014766702f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.0027360164f : 
                        -0.105632916f)))));
    return pred;
  } // constant pool size = 141B, number of visited nodes = 31, static init size = 90B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_7_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (!Double.isNaN(data[10]) ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        0.073696755f : 
                        0.12994626f) : 
                     (data[0 /* COVER_START */] < 1.15607523E12f ? 
                        0.17460757f : 
                        0.13573563f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.16337967f : 
                        0.09108236f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 27.970625f ? 
                        0.13157745f : 
                        0.011959599f))) : 
            -0.018840179f) : 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27620363E12f ? 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.21611302E12f ? 
                     (data[56 /* MTA_APRP */] < 82.45469f ? 
                        -0.0349349f : 
                        0.06522568f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.26245968E12f ? 
                        0.2104008f : 
                        0.10127919f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                        -0.06763357f : 
                        0.21106824f) : 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 29.684376f ? 
                        -0.074542746f : 
                        0.17872097f))) : 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 387.7192f ? 
                        -0.093230106f : 
                        0.15021223f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.14022247f : 
                        0.06834653f)) : 
                 (data[60 /* i */] < 2002.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.19558635f : 
                        -0.06555842f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.07668894f : 
                        -0.10292742f)))));
    return pred;
  } // constant pool size = 116B, number of visited nodes = 24, static init size = 120B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_8_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (!Double.isNaN(data[10]) ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[35])) ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 33.83453f ? 
                        0.047238804f : 
                        0.11772095f) : 
                     (data[0 /* COVER_START */] < 1.15607523E12f ? 
                        0.16114755f : 
                        0.118859954f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.15275331f : 
                        0.08057178f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 27.970625f ? 
                        0.1177889f : 
                        0.010745646f))) : 
            -0.01716543f) : 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[56 /* MTA_APRP */] < 79.056404f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 42.0f ? 
                        0.16355626f : 
                        -0.048746254f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                        -0.072520174f : 
                        -0.009961298f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27471452E12f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.162719E12f ? 
                        0.0487928f : 
                        0.14169675f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        -0.034422796f : 
                        0.06953034f))) : 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.025053866f : 
                        -0.10014f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.12832357f : 
                        0.059693627f)) : 
                 (data[60 /* i */] < 2002.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.22926058f : 
                        -0.058280382f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.07387293f : 
                        -0.10199422f)))));
    return pred;
  } // constant pool size = 116B, number of visited nodes = 24, static init size = 120B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_9_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (!Double.isNaN(data[10]) ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.19530075E12f ? 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                     (data[55 /* MTA_FAP */] < 625.1014f ? 
                        0.12594187f : 
                        0.031261556f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.14032961f : 
                        0.096289635f)) : 
                 (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        0.031359054f : 
                        0.092235275f) : 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[35])) ? 
                        0.08150819f : 
                        0.11734566f))) : 
            -0.015623125f) : 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 199.28625f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.047912672f : 
                        -0.028180089f) : 
                     (data[55 /* MTA_FAP */] < 441.91592f ? 
                        0.0026461184f : 
                        0.11838209f)) : 
                 (data[0 /* COVER_START */] < 1.15235593E12f ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 270.6911f ? 
                        -0.14364368f : 
                        0.025466777f) : 
                     (!Double.isNaN(data[59 /* POL_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[59]) && (data[59] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[59])) ? 
                        0.10458771f : 
                        0.18394102f))) : 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.023046883f : 
                        -0.09908271f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.118304804f : 
                        0.052417137f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 170.99687f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
                        -0.10253276f : 
                        -0.09492277f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.03552781f : 
                        -0.092665516f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 24, static init size = 180B
  // {01001111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-14, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {5, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {24, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_10_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (!Double.isNaN(data[10]) ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 16.515078f ? 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[35])) ? 
                        0.04392923f : 
                        0.09554702f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.13092792f : 
                        0.10065888f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.30317117E12f ? 
                        0.13643533f : 
                        0.02337246f) : 
                     (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1969.5f ? 
                        0.054269943f : 
                        0.14686547f))) : 
            -0.0142055545f) : 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[56 /* MTA_APRP */] < 79.056404f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 42.0f ? 
                        0.14283326f : 
                        -0.046948787f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                        -0.06917253f : 
                        -0.011120821f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27471452E12f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.21498357E12f ? 
                        0.04280785f : 
                        0.13394944f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.039137878f : 
                        -0.042950857f))) : 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 387.7192f ? 
                        -0.088042885f : 
                        0.13304318f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.109658554f : 
                        0.046223063f)) : 
                 (data[60 /* i */] < 2002.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.17371206f : 
                        -0.057032887f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.06766335f : 
                        -0.10023629f)))));
    return pred;
  } // constant pool size = 116B, number of visited nodes = 24, static init size = 120B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_11_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (!Double.isNaN(data[10]) ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                     (data[0 /* COVER_START */] < 1.17568805E12f ? 
                        0.14859112f : 
                        0.007216869f) : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                        -0.040547334f : 
                        0.09382214f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        0.12269515f : 
                        0.01770449f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.12454309f : 
                        0.08583291f))) : 
            -0.012904969f) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[60 /* i */] < 6004.5f ? 
                 (Double.isNaN(data[23]) || data[23 /* BEDROOMS */] < 2.5f ? 
                     (data[60 /* i */] < 1849.5f ? 
                        -0.067855224f : 
                        0.11103087f) : 
                     (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 1.5f ? 
                        0.1267401f : 
                        0.25663838f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 171.34282f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        0.004084476f : 
                        0.06883644f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.20916528E12f ? 
                        0.06954597f : 
                        0.17025681f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.03207422f : 
                        -0.09709128f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.10204188f : 
                        0.04089908f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 185.14156f ? 
                     (data[60 /* i */] < 4003.5f ? 
                        -0.059889346f : 
                        -0.09779002f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.04145493f : 
                        -0.08876859f)))));
    return pred;
  } // constant pool size = 116B, number of visited nodes = 24, static init size = 120B
  // {01001111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-14, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {11110101 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-81, 7, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_12_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[9])) ? 
                 (!Double.isNaN(data[10]) ? 
                     (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                        0.113450415f : 
                        0.03868196f) : 
                    -0.12922387f) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 1.5f ? 
                        0.13004698f : 
                        0.2004095f) : 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.11636792f : 
                        -0.00394478f))) : 
             (!Double.isNaN(data[10]) ? 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 24.383595f ? 
                        0.03112305f : 
                        0.12015886f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 7.5f ? 
                        0.08729596f : 
                        -0.1222909f)) : 
                -0.096546434f)) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 42.5f ? 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        8.2174694E-4f : 
                        0.06500467f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 9.6444809E11f ? 
                        0.24201459f : 
                        0.06219618f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.22664505E12f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.036751498f : 
                        0.09513432f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27396348E12f ? 
                        0.17302197f : 
                        0.051728006f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.029727282f : 
                        -0.09602882f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.09521585f : 
                        0.03628725f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.094623595f : 
                        0.062438864f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.072346255f : 
                        -0.10153626f)))));
    return pred;
  } // constant pool size = 121B, number of visited nodes = 27, static init size = 90B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-126, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_13_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[9])) ? 
                 (!Double.isNaN(data[10]) ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        0.037961613f : 
                        0.107824f) : 
                    -0.12172158f) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                        0.09871171f : 
                        0.17605852f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.25701194E12f ? 
                        0.08215088f : 
                        -0.0572822f))) : 
             (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[9])) ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[57 /* MTA_DATE */] < 826.5f ? 
                        0.423124f : 
                        -0.07977942f) : 
                     (data[25 /* WALL_CONSTRUCTION */] < 14.5f ? 
                        0.03252453f : 
                        -0.09975029f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 8.226484f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        0.10914864f : 
                        0.066240884f) : 
                     (!Double.isNaN(data[41 /* LEGAL_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[41]) && (data[41] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[41])) ? 
                        -0.010258929f : 
                        0.048865955f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 204.33836f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.027685743f : 
                        -0.037445523f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.0037664496f : 
                        0.11912794f)) : 
                 (data[60 /* i */] < 6013.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 15.5f ? 
                        0.1915165f : 
                        0.07924809f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.1109099f : 
                        0.033906415f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.02749616f : 
                        -0.09494634f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.0890101f : 
                        0.032267105f)) : 
                 (data[60 /* i */] < 2002.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.20861493f : 
                        -0.04256781f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 170.99687f ? 
                        -0.09582186f : 
                        -0.07175579f)))));
    return pred;
  } // constant pool size = 150B, number of visited nodes = 30, static init size = 180B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01101111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-10, 2, 0, 0};
  // {11101111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_14_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[9])) ? 
                 (!Double.isNaN(data[10]) ? 
                     (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                        0.102751285f : 
                        0.025755098f) : 
                    -0.115105346f) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 1.5f ? 
                        0.09814969f : 
                        0.16190125f) : 
                     (data[57 /* MTA_DATE */] < 1099.0f ? 
                        0.13905187f : 
                        0.029050844f))) : 
             (Double.isNaN(data[11]) || data[11 /* SUM_INSURED_CONTENTS */] < 25000.0f ? 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 218.74602f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.10326801f : 
                        -0.085505635f) : 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                        -0.06403755f : 
                        0.10998769f)) : 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 24.383595f ? 
                        0.022531632f : 
                        0.106352285f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        0.041699793f : 
                        0.086226866f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[0 /* COVER_START */] < 1.14259146E12f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[44 /* GARDEN_ADDON_PRE_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[44]) || (data[44] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[44]) && (data[44] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[44])) ? 
                        -0.11112908f : 
                        0.0145737855f) : 
                    0.092324056f) : 
                 (data[0 /* COVER_START */] < 1.27351259E12f ? 
                     (data[56 /* MTA_APRP */] < 171.34282f ? 
                        0.016088642f : 
                        0.090500966f) : 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                        0.0041133934f : 
                        0.16182415f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[18])) ? 
                        -0.09881016f : 
                        -0.0745329f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.083301164f : 
                        0.028744726f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.092084944f : 
                        0.0661344f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.07276475f : 
                        -0.10045338f)))));
    return pred;
  } // constant pool size = 151B, number of visited nodes = 29, static init size = 210B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {28, 0, 0, 0};
  // {10000010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {65, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-126, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {10111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {29, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_15_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.19530075E12f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[9])) ? 
                        0.10707288f : 
                        0.1486958f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        0.017834306f : 
                        0.09794067f)) : 
                 (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                        -0.026632221f : 
                        0.046471965f) : 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        0.03235305f : 
                        0.08547919f))) : 
             (Double.isNaN(data[11]) || data[11 /* SUM_INSURED_CONTENTS */] < 25000.0f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[57 /* MTA_DATE */] < 826.5f ? 
                        0.2759792f : 
                        -0.07415788f) : 
                     (data[25 /* WALL_CONSTRUCTION */] < 14.5f ? 
                        0.040072083f : 
                        -0.09762387f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 23.073359f ? 
                     (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1969.5f ? 
                        0.05275337f : 
                        0.087162934f) : 
                     (data[57 /* MTA_DATE */] < 1265.5f ? 
                        0.035105124f : 
                        -0.05762738f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[58 /* LAST_ANN_PREM_GROSS */] < 167.66219f ? 
                 (data[0 /* COVER_START */] < 1.21790516E12f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                        -0.09767895f : 
                        -0.00786098f) : 
                     (data[0 /* COVER_START */] < 1.27034458E12f ? 
                        0.08132206f : 
                        -0.01913669f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 43.5f ? 
                        0.14049315f : 
                        0.014187584f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.00285108f : 
                        0.056151967f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.018310139f : 
                        -0.09279f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.07799862f : 
                        0.02564549f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.090738684f : 
                        0.056671005f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.061680134f : 
                        -0.099904515f)))));
    return pred;
  } // constant pool size = 151B, number of visited nodes = 31, static init size = 150B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {17, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_16_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (data[55 /* MTA_FAP */] < 471.74173f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.092222966f : 
                        0.011012253f) : 
                     (Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[40]) || (data[40] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                        -0.03574105f : 
                        0.04489543f)) : 
                 (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                     (!Double.isNaN(data[10]) ? 
                        0.09833535f : 
                        -0.11433699f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.13710542f : 
                        0.026451228f))) : 
             (Double.isNaN(data[11]) || data[11 /* SUM_INSURED_CONTENTS */] < 25000.0f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[57 /* MTA_DATE */] < 826.5f ? 
                        0.19714828f : 
                        -0.071593784f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                        -0.09653432f : 
                        0.04532969f)) : 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 24.383595f ? 
                        0.015317795f : 
                        0.095197044f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 7.5f ? 
                        0.06534298f : 
                        -0.12967417f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                 (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 586.0f ? 
                     (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(584, 2, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(584, 2, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT5, 584, 2, data[57])) ? 
                        -0.06481588f : 
                        0.20437045f) : 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(700, 586, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT6, 700, 586, data[57])) ? 
                        -0.14158127f : 
                        0.26077628f)) : 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (data[56 /* MTA_APRP */] < 149.12079f ? 
                        -0.017966807f : 
                        0.0672199f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        -0.014377265f : 
                        0.07425675f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (data[6 /* RISK_RATED_AREA_B */] < 71.5f ? 
                     (data[56 /* MTA_APRP */] < 169.38687f ? 
                        0.018527836f : 
                        0.066352144f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.017431231f : 
                        -0.089661844f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.089341104f : 
                        0.048943624f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.052805673f : 
                        -0.099359185f)))));
    return pred;
  } // constant pool size = 312B, number of visited nodes = 31, static init size = 1128B
  // {01001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-46, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-65, 3, 0, 0};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 10100001 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -128, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0};
  // {...586 0-bits}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 8};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_17_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.19530075E12f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[9])) ? 
                        0.09931693f : 
                        0.12891905f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        0.010828431f : 
                        0.086611904f)) : 
                 (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.30884056E12f ? 
                        0.015429297f : 
                        -0.11535857f) : 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                        0.05743377f : 
                        0.11452809f))) : 
             (!Double.isNaN(data[10]) ? 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 23.073359f ? 
                     (data[10 /* RISK_RATED_AREA_C */] < 2.5f ? 
                        0.079116456f : 
                        0.044344787f) : 
                     (data[57 /* MTA_DATE */] < 1265.5f ? 
                        0.028098188f : 
                        -0.056631412f)) : 
                -0.08919699f)) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27620363E12f ? 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.21611302E12f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                        0.0063128504f : 
                        0.13799734f) : 
                     (data[0 /* COVER_START */] < 1.25967886E12f ? 
                        0.104139954f : 
                        0.040182926f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06333692f : 
                        0.16514073f) : 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 29.684376f ? 
                        -0.07331688f : 
                        0.13330293f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[18])) ? 
                        -0.096796595f : 
                        -0.06642589f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.0698021f : 
                        0.017342167f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 185.14156f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.085959285f : 
                        -0.10165698f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.056155775f : 
                        -0.07746924f)))));
    return pred;
  } // constant pool size = 147B, number of visited nodes = 28, static init size = 210B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {11000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-125, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {10111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {29, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_18_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < -4.4025f ? 
                     (Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[40]) || (data[40] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                        -0.011164602f : 
                        0.053992398f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.18776241E12f ? 
                        0.08557328f : 
                        0.030011687f)) : 
                 (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                     (!Double.isNaN(data[10]) ? 
                        0.10485759f : 
                        -0.1426031f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.12991236f : 
                        -0.055532675f))) : 
             (!Double.isNaN(data[10]) ? 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 24.383595f ? 
                        0.009589251f : 
                        0.08573058f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        0.023690667f : 
                        0.068035215f)) : 
                -0.087563485f)) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 222.67645f ? 
                 (data[56 /* MTA_APRP */] < 26.899609f ? 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                        -0.07598385f : 
                        -0.007998958f) : 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                        -0.022102002f : 
                        0.02452654f)) : 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
                     (Double.isNaN(data[22 /* APPR_LOCKS */]) || !GenModel.bitSetIsInRange(32, 0, data[22]) || (data[22] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[22]) && (data[22] < 2) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[22])) ? 
                        -0.06585424f : 
                        0.06951711f) : 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.07708457f : 
                        0.022419887f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 167.66219f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 4.5f ? 
                        0.020693488f : 
                        -0.06790914f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.042565834f : 
                        0.051670644f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.11295036f : 
                        -0.0874757f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        0.07982997f : 
                        -0.098371565f)))));
    return pred;
  } // constant pool size = 145B, number of visited nodes = 28, static init size = 210B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11001101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-77, 2, 0, 0};
  // {11011101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-69, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_19_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (data[55 /* MTA_FAP */] < 471.74173f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.07744365f : 
                        0.0017954065f) : 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[35])) ? 
                        -0.058391083f : 
                        0.019795652f)) : 
                 (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                     (!Double.isNaN(data[10]) ? 
                        0.08689294f : 
                        -0.11032819f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.11541013f : 
                        0.013611548f))) : 
             (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[9])) ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 204.66782f ? 
                        -0.039615862f : 
                        0.34085384f) : 
                     (data[25 /* WALL_CONSTRUCTION */] < 14.5f ? 
                        0.07549286f : 
                        -0.09328584f)) : 
                 (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1968.5f ? 
                     (data[0 /* COVER_START */] < 1.23855752E12f ? 
                        -0.026669668f : 
                        0.03665247f) : 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                        0.05477917f : 
                        0.10481817f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[60 /* i */] < 6004.5f ? 
                 (Double.isNaN(data[23]) || data[23 /* BEDROOMS */] < 2.5f ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 158.41562f ? 
                        -0.060986593f : 
                        0.10647493f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.19487214E12f ? 
                        0.16452129f : 
                        0.071720965f)) : 
                 (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 136.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
                        -0.057591278f : 
                        0.0076756272f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.22664505E12f ? 
                        0.035966743f : 
                        0.11824521f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.0015216342f : 
                        -0.088283874f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 0.5f ? 
                        0.11004909f : 
                        0.035022594f)) : 
                 (data[60 /* i */] < 2002.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.1239616f : 
                        -0.022844682f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        0.20451343f : 
                        -0.08554125f)))));
    return pred;
  } // constant pool size = 159B, number of visited nodes = 31, static init size = 210B
  // {01001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-46, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 1, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-65, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_20_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                 (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 8.152266f ? 
                        -0.06943408f : 
                        0.051166892f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        0.09851702f : 
                        -0.025525007f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 6.4053516f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        -0.048429046f : 
                        -0.06229516f) : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        -0.07870627f : 
                        0.06693112f))) : 
             (data[60 /* i */] < 6011.5f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (data[56 /* MTA_APRP */] < 200.5625f ? 
                        -0.13914442f : 
                        -0.0064041615f) : 
                    0.14553699f) : 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                     (!Double.isNaN(data[41 /* LEGAL_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[41]) && (data[41] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[41])) ? 
                        0.041768767f : 
                        0.067447536f) : 
                     (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                        0.11298223f : 
                        -0.04055389f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27620363E12f ? 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.21611302E12f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                        0.0033724972f : 
                        0.11437521f) : 
                     (data[0 /* COVER_START */] < 1.25967886E12f ? 
                        0.08727386f : 
                        0.033463266f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.05942378f : 
                        0.15114303f) : 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 29.684376f ? 
                        -0.07069875f : 
                        0.107828535f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (data[6 /* RISK_RATED_AREA_B */] < 69.0f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.060694262f : 
                        -0.008003065f) : 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
                        -0.09396526f : 
                        -0.05525076f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[0 /* COVER_START */] < 1.24433282E12f ? 
                        0.17268157f : 
                        0.02274344f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.09894984f : 
                        -0.09060563f)))));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 30, static init size = 210B
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-60, 0, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-126, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-125, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {29, 3, 0, 0};
  // {00100000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_21_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 8.152266f ? 
                        -0.06291548f : 
                        0.047006525f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        0.0829464f : 
                        -0.018883042f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 6.4053516f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        -0.06279793f : 
                        -0.058570463f) : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        -0.0868393f : 
                        0.057877727f))) : 
             (data[60 /* i */] < 6011.5f ? 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                    -0.18732181f : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.02596251f : 
                        0.1401187f)) : 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[35])) ? 
                        0.030125229f : 
                        0.059284773f) : 
                     (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                        0.11115868f : 
                        -0.036310825f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[0 /* COVER_START */] < 1.14259146E12f ? 
                 (Double.isNaN(data[21 /* APPR_ALARM */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 592.5f ? 
                        -0.106610775f : 
                        -0.010847419f) : 
                    0.04812618f) : 
                 (data[0 /* COVER_START */] < 1.27351259E12f ? 
                     (data[0 /* COVER_START */] < 1.2289409E12f ? 
                        0.013287393f : 
                        0.06484745f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 353.0f ? 
                        -0.0058430415f : 
                        0.06336374f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 167.66219f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        -0.053203788f : 
                        -0.05740154f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.037227623f : 
                        0.04382723f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.09513678f : 
                        -0.0842733f) : 
                     (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                        -0.088688836f : 
                        -0.09817587f)))));
    return pred;
  } // constant pool size = 143B, number of visited nodes = 29, static init size = 150B
  // {00100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-124, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-13, 3, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-126, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_22_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1985.0f ? 
                 (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[9])) ? 
                     (!Double.isNaN(data[10]) ? 
                        0.06939487f : 
                        -0.104859225f) : 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.02612938f : 
                        0.09672013f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 15.244687f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 4.5f ? 
                        -0.066263855f : 
                        0.041171536f) : 
                     (data[6 /* RISK_RATED_AREA_B */] < 14.5f ? 
                        -0.059885018f : 
                        0.07730269f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 15.5f ? 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 27.961876f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        0.08298704f : 
                        0.03341467f) : 
                     (data[57 /* MTA_DATE */] < 1253.5f ? 
                        0.02026111f : 
                        -0.088859566f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 22.409765f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 21.359308f ? 
                        -0.052234035f : 
                        -0.112335384f) : 
                     (data[60 /* i */] < 72079.5f ? 
                        -0.028411506f : 
                        0.0730961f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[58 /* LAST_ANN_PREM_GROSS */] < 167.66219f ? 
                 (data[0 /* COVER_START */] < 1.22664505E12f ? 
                     (Double.isNaN(data[59 /* POL_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[59]) || (data[59] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[59]) && (data[59] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[59])) ? 
                        -0.080254525f : 
                        0.013920206f) : 
                     (data[0 /* COVER_START */] < 1.26269719E12f ? 
                        0.10359216f : 
                        -0.019584825f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 43.5f ? 
                        0.11907657f : 
                        0.005577524f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 15.5f ? 
                        0.03259471f : 
                        -0.023091119f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.012006356f : 
                        -0.08477965f) : 
                     (data[56 /* MTA_APRP */] < 142.7075f ? 
                        -3.256336E-4f : 
                        0.047068186f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 170.99687f ? 
                     (data[57 /* MTA_DATE */] < 2.5f ? 
                        0.19331925f : 
                        -0.08479116f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.057591222f : 
                        -0.06644359f)))));
    return pred;
  } // constant pool size = 144B, number of visited nodes = 31, static init size = 120B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_23_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        -0.01746528f : 
                        0.0742271f) : 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 214.17328f ? 
                        -0.089368135f : 
                        0.034622777f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 33.77367f ? 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 2.0215626f ? 
                        -0.05639185f : 
                        0.04793134f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        0.10997815f : 
                        -3.7717956E-4f))) : 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (data[60 /* i */] < 4010.5f ? 
                    -0.19938278f : 
                     (data[60 /* i */] < 31482.5f ? 
                        0.09536833f : 
                        -0.014736221f)) : 
                 (data[60 /* i */] < 6011.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.027638238f : 
                        0.13614552f) : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
                        -0.0050392724f : 
                        0.068358675f)))) : 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
             (data[56 /* MTA_APRP */] < 36.622345f ? 
                 (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 473.0f ? 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 39.67031f ? 
                        -0.040643014f : 
                        0.12651597f) : 
                     (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(799, 473, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(799, 473, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT2, 799, 473, data[57])) ? 
                        -0.084839284f : 
                        0.34010294f)) : 
                 (data[0 /* COVER_START */] < 1.16109581E12f ? 
                     (!Double.isNaN(data[41 /* LEGAL_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[41]) && (data[41] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[41])) ? 
                        -0.1413465f : 
                        -0.049380943f) : 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.03690872f : 
                        4.040222E-4f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 130.98602f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        -0.06801365f : 
                        -0.081528544f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        0.0048661777f : 
                        0.054922715f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.09254643f : 
                        -0.08011578f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        0.06446188f : 
                        -0.09554311f)))));
    return pred;
  } // constant pool size = 238B, number of visited nodes = 30, static init size = 696B
  // {01001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-14, 3, 0, 0};
  // {11100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-121, 0, 0, 0};
  // {...473 0-bits}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_24_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (data[0 /* COVER_START */] < 1.18549434E12f ? 
                     (!Double.isNaN(data[49 /* HP1_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[49]) && (data[49] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[49])) ? 
                        -0.13186097f : 
                        0.09642542f) : 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 13.975312f ? 
                        -0.0062240968f : 
                        0.057164725f)) : 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                        0.093982816f : 
                        0.11493042f) : 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[35])) ? 
                        -0.14936131f : 
                        0.03466155f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 15.5f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                     (data[10 /* RISK_RATED_AREA_C */] < 0.5f ? 
                        0.12946077f : 
                        0.028331326f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        -0.014994662f : 
                        0.03152313f)) : 
                 (Double.isNaN(data[15]) || data[15 /* SPEC_SUM_INSURED */] < 3715.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 27.564062f ? 
                        -0.048939295f : 
                        0.03387555f) : 
                     (data[0 /* COVER_START */] < 1.2806707E12f ? 
                        0.0065349434f : 
                        0.13596019f)))) : 
         (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
             (data[60 /* i */] < 3002.5f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                    0.16415101f : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        0.69098586f : 
                        -0.037105735f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        -0.06219619f : 
                        0.033469632f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1284.5f ? 
                        -0.08471518f : 
                        0.20461203f))) : 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (data[60 /* i */] < 6005.5f ? 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.109978005f : 
                        -0.034748215f) : 
                     (data[56 /* MTA_APRP */] < 38.010624f ? 
                        -0.03898649f : 
                        0.026370265f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 44.5f ? 
                        0.03419088f : 
                        -0.06850171f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.0863911f : 
                        -0.10116492f)))));
    return pred;
  } // constant pool size = 147B, number of visited nodes = 30, static init size = 150B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {11011000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_25_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.19530075E12f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        -0.18480411f : 
                        0.07843308f) : 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.062201735f : 
                        0.0136302505f)) : 
                 (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[40])) ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.30884056E12f ? 
                        -0.008755945f : 
                        -0.11977711f) : 
                     (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 4.5f ? 
                        0.008780117f : 
                        0.057338826f))) : 
             (!Double.isNaN(data[10]) ? 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        0.03008235f : 
                        -0.024745932f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 7.5f ? 
                        0.03828656f : 
                        -0.1439801f)) : 
                -0.07877727f)) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 351.04306f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.00392913f : 
                        -0.08036938f) : 
                     (!Double.isNaN(data[36]) && (data[36] < 2)  ? 
                        -0.120917864f : 
                        0.104737446f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 137.31906f ? 
                        0.14968953f : 
                        0.078188695f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 43.95844f ? 
                        0.06235137f : 
                        -0.019195791f))) : 
             (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (data[56 /* MTA_APRP */] < 114.41812f ? 
                        -0.069185615f : 
                        0.038375977f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.041746743f : 
                        -0.06426059f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        -0.10026072f : 
                        0.079331055f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        -0.09721061f : 
                        -0.04498133f)))));
    return pred;
  } // constant pool size = 130B, number of visited nodes = 28, static init size = 120B
  // {11101101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-73, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_26_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 2.858379f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.042947646f : 
                        -0.046356395f) : 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 208.06328f ? 
                        -0.092579424f : 
                        0.013039418f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.28989803E12f ? 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        -0.013738218f : 
                        0.07328039f) : 
                     (data[60 /* i */] < 112808.5f ? 
                        0.09977723f : 
                        -0.07488472f))) : 
             (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                 (data[60 /* i */] < 6011.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.0550713f : 
                        0.13214692f) : 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[35])) ? 
                        0.011624082f : 
                        0.04225081f)) : 
                 (data[56 /* MTA_APRP */] < 172.40327f ? 
                     (data[23 /* BEDROOMS */] < 2.5f ? 
                        0.071008265f : 
                        -0.13188897f) : 
                     (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                        0.10693638f : 
                        -0.066580035f)))) : 
         (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (data[60 /* i */] < 4003.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.12515603f : 
                        0.15431337f) : 
                     (data[56 /* MTA_APRP */] < -6.860625f ? 
                        -0.12112804f : 
                        -0.055143233f)) : 
                 (data[60 /* i */] < 2002.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        0.7607789f : 
                        -0.010228938f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1284.5f ? 
                        -0.08198236f : 
                        0.18694219f))) : 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (data[60 /* i */] < 6005.5f ? 
                     (data[37 /* YEARBUILT */] < 1988.5f ? 
                        0.10699473f : 
                        -0.017827902f) : 
                     (Double.isNaN(data[38 /* PAYMENT_METHOD */]) || !GenModel.bitSetIsInRange(32, 0, data[38]) || (data[38] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[38])) ? 
                        -0.010443894f : 
                        0.035640214f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 185.39937f ? 
                        -0.02485932f : 
                        0.040925f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        0.08966478f : 
                        -0.09182722f)))));
    return pred;
  } // constant pool size = 151B, number of visited nodes = 31, static init size = 150B
  // {00100011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-60, 0, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-126, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {31, 3, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {5, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_27_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 2.858379f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.042469844f : 
                        -0.034638215f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.29459605E12f ? 
                        -0.033180412f : 
                        -0.16188018f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.28989803E12f ? 
                     (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 23.0f ? 
                        0.068714544f : 
                        -0.012861686f) : 
                     (data[60 /* i */] < 112808.5f ? 
                        0.094659165f : 
                        -0.064926125f))) : 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (data[0 /* COVER_START */] < 1.18549434E12f ? 
                     (!Double.isNaN(data[49 /* HP1_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[49]) && (data[49] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[49])) ? 
                        -0.15149587f : 
                        0.08468688f) : 
                     (data[0 /* COVER_START */] < 1.26057461E12f ? 
                        -0.055589017f : 
                        0.025717562f)) : 
                 (data[56 /* MTA_APRP */] < 172.40327f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.027987998f : 
                        0.084007f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.09513574f : 
                        0.003120174f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 277.6907f ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 325.58124f ? 
                        -0.04232845f : 
                        0.0749154f) : 
                     (data[60 /* i */] < 84043.5f ? 
                        -0.0814723f : 
                        0.14431638f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 137.31906f ? 
                        0.1395421f : 
                        0.0712431f) : 
                     (data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.014667612f : 
                        0.07278772f))) : 
             (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 170.99687f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        -0.04187544f : 
                        0.037673146f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.009974159f : 
                        -0.07682849f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.0016403209f : 
                        0.07437651f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.046168216f : 
                        -0.021420317f)))));
    return pred;
  } // constant pool size = 141B, number of visited nodes = 31, static init size = 90B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_28_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (data[10 /* RISK_RATED_AREA_C */] < 36.0f ? 
             (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                 (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[35])) ? 
                     (!Double.isNaN(data[22 /* APPR_LOCKS */]) && (GenModel.bitSetIsInRange(32, 0, data[22]) && (data[22] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[22])) ? 
                        -0.1153601f : 
                        0.026026702f) : 
                     (!Double.isNaN(data[2 /* P1_PT_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 9) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                        -0.058938984f : 
                        0.05177465f)) : 
                 (Double.isNaN(data[44 /* GARDEN_ADDON_PRE_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[44]) || (data[44] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[44]) && (data[44] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[44])) ? 
                     (data[0 /* COVER_START */] < 1.19530075E12f ? 
                        0.10111752f : 
                        -0.022038054f) : 
                    0.15605922f)) : 
             (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 393.6272f ? 
                     (!Double.isNaN(data[10]) ? 
                        -0.025924668f : 
                        -0.122153364f) : 
                    0.074193306f) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                        -0.044062387f : 
                        0.07567757f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.010422047f : 
                        -0.08121237f)))) : 
         (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
             (data[60 /* i */] < 3002.5f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                    0.1172266f : 
                     (data[0 /* COVER_START */] < 1.1565193E12f ? 
                        0.5124918f : 
                        -0.0077409674f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 571.5f ? 
                        -0.055594355f : 
                        0.03081315f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1284.5f ? 
                        -0.07833448f : 
                        0.16655272f))) : 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (data[56 /* MTA_APRP */] < 42.0375f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 900.0f ? 
                        -0.04133148f : 
                        0.106362216f) : 
                     (data[0 /* COVER_START */] < 1.2615102E12f ? 
                        0.08063319f : 
                        0.013626049f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 9.5f ? 
                        0.043813568f : 
                        -0.015210694f) : 
                     (Double.isNaN(data[53 /* HP3_ADDON_POST_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[53]) || (data[53] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[53]) && (data[53] < 2) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[53])) ? 
                        -0.09032563f : 
                        0.028484453f)))));
    return pred;
  } // constant pool size = 147B, number of visited nodes = 28, static init size = 210B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {5, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {31, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_29_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
             (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1985.0f ? 
                 (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.06617533f : 
                        0.0020303337f) : 
                     (Double.isNaN(data[44 /* GARDEN_ADDON_PRE_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[44]) || (data[44] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[44]) && (data[44] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[44])) ? 
                        -0.020030014f : 
                        0.16231416f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 15.244687f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 4.5f ? 
                        -0.06926363f : 
                        0.029558394f) : 
                     (data[6 /* RISK_RATED_AREA_B */] < 14.5f ? 
                        -0.07696192f : 
                        0.06039204f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 3.5f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 4.5f ? 
                        0.11117851f : 
                        0.004673054f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        -0.045423802f : 
                        0.03287816f)) : 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        -0.03515121f : 
                        -0.039090775f) : 
                     (data[10 /* RISK_RATED_AREA_C */] < 18.5f ? 
                        0.030158749f : 
                        -0.011503404f)))) : 
         (data[60 /* i */] < 5503.5f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1992.5f ? 
                     (data[23 /* BEDROOMS */] < 2.5f ? 
                        0.034065623f : 
                        0.11994497f) : 
                    -0.08762996f) : 
                 (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 36.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.023884432f : 
                        -0.06862082f) : 
                     (data[37 /* YEARBUILT */] < 1931.5f ? 
                        0.28057688f : 
                        -0.10097214f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 88.8375f ? 
                        -0.045286722f : 
                        0.27078247f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.103424825f : 
                        0.046363026f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        -0.03121933f : 
                        0.02916068f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.010083241f : 
                        -0.068611704f)))));
    return pred;
  } // constant pool size = 132B, number of visited nodes = 30, static init size = 60B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_30_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[35])) ? 
                     (data[56 /* MTA_APRP */] < 424.98297f ? 
                        0.0077302917f : 
                        -0.066153474f) : 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 17.78547f ? 
                        0.008060208f : 
                        0.065454155f)) : 
                 (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1984.5f ? 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                        0.055633765f : 
                        0.07595905f) : 
                     (Double.isNaN(data[20 /* P1_SEX */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                        -0.061007027f : 
                        0.018589946f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 7.5f ? 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.01792978f : 
                        0.022804005f) : 
                     (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 14.5f ? 
                        0.05977819f : 
                        0.20787658f)) : 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 207.62157f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        -0.030372124f : 
                        -0.036844097f) : 
                     (data[17 /* UNSPEC_HRP_PREM */] < 35.625782f ? 
                        -0.0014136981f : 
                        0.052202348f)))) : 
         (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.076670185f : 
                        -0.11318955f) : 
                    0.26625326f) : 
                 (data[60 /* i */] < 2002.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        0.32235825f : 
                        -0.01045672f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1284.5f ? 
                        -0.07471533f : 
                        0.14523463f))) : 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (data[60 /* i */] < 6005.5f ? 
                     (!Double.isNaN(data[59 /* POL_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[59]) && (data[59] < 4) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[59])) ? 
                        0.047299433f : 
                        0.24718353f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.08689042f : 
                        0.008783618f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 185.39937f ? 
                        -0.022610184f : 
                        0.034423146f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        0.10976403f : 
                        -0.08816516f)))));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 30, static init size = 210B
  // {01001011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-46, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 1, 0, 0};
  // {10111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {29, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_31_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                 (data[10 /* RISK_RATED_AREA_C */] < 18.5f ? 
                     (data[10 /* RISK_RATED_AREA_C */] < 0.5f ? 
                        0.11711949f : 
                        0.044307344f) : 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        -0.11871879f : 
                        4.3017868E-4f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.28989803E12f ? 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 188.75093f ? 
                        -0.053405475f : 
                        0.03686193f) : 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 6.657422f ? 
                        -0.1391674f : 
                        0.0031856126f))) : 
             (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (data[60 /* i */] < 6011.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 2.5f ? 
                        -0.097091086f : 
                        -0.0045578354f) : 
                     (!Double.isNaN(data[41 /* LEGAL_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[41]) && (data[41] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[41])) ? 
                        0.0069416678f : 
                        0.03527493f)) : 
                 (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 216.29585f ? 
                     (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 9.5f ? 
                        0.10339267f : 
                        -0.051503293f) : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                        -0.17068788f : 
                        0.010141201f)))) : 
         (data[56 /* MTA_APRP */] < 93.201096f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                 (Double.isNaN(data[33]) || data[33 /* PROP_TYPE */] < 46.5f ? 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 39.67031f ? 
                        -0.02865814f : 
                        0.09623195f) : 
                    -0.14846043f) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 2.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 9.5f ? 
                        0.070639186f : 
                        -0.04862388f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.05140434f : 
                        -0.09501036f))) : 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1239.5f ? 
                        0.006161226f : 
                        0.21573614f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27375206E12f ? 
                        0.121347986f : 
                        -0.12993838f)) : 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.071897686f : 
                        -0.07279714f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.07517482f : 
                        -0.01208493f)))));
    return pred;
  } // constant pool size = 147B, number of visited nodes = 30, static init size = 150B
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-126, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-127, 0, 0, 0};
  // {11000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-125, 0, 0, 0};
  // {10111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {29, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_32_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                 (data[10 /* RISK_RATED_AREA_C */] < 18.5f ? 
                     (data[10 /* RISK_RATED_AREA_C */] < 0.5f ? 
                        0.11353367f : 
                        0.040974595f) : 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        -0.11136571f : 
                        3.8710042E-4f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.28989803E12f ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 202.20172f ? 
                        -0.04416717f : 
                        0.03931836f) : 
                     (Double.isNaN(data[15]) || data[15 /* SPEC_SUM_INSURED */] < 1107.5f ? 
                        -0.122475706f : 
                        0.009357145f))) : 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
                     (data[60 /* i */] < 60038.5f ? 
                        0.04899759f : 
                        -0.103308715f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.037441935f : 
                        0.04045354f)) : 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                     (!Double.isNaN(data[41 /* LEGAL_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[41]) && (data[41] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[41])) ? 
                        0.008568343f : 
                        0.033131685f) : 
                     (data[56 /* MTA_APRP */] < 71.37141f ? 
                        -0.07078814f : 
                        0.10018873f)))) : 
         (data[56 /* MTA_APRP */] < 75.52023f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                 (data[56 /* MTA_APRP */] < -2.4115624f ? 
                     (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 4.5f ? 
                        -0.118226916f : 
                        -0.064501606f) : 
                     (data[60 /* i */] < 27988.5f ? 
                        0.039693285f : 
                        -0.027089562f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.075436704f : 
                        0.028108094f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.07850899f : 
                        -0.09398058f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 164.14586f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        -0.015889587f : 
                        -0.04020533f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -3.2366638E-4f : 
                        0.04561f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.056659248f : 
                        -0.019220417f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.092514865f : 
                        -0.06737446f)))));
    return pred;
  } // constant pool size = 156B, number of visited nodes = 31, static init size = 180B
  // {01001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-14, 3, 0, 0};
  // {11011101 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-69, 7, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-126, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00100000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_33_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (data[58 /* LAST_ANN_PREM_GROSS */] < 57.89422f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 51.803905f ? 
                        -0.042636756f : 
                        -0.113594376f) : 
                     (data[60 /* i */] < 4040.5f ? 
                        -0.11879825f : 
                        0.016750867f)) : 
                 (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 249.5f ? 
                        -0.0508371f : 
                        0.07875442f) : 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[9])) ? 
                        0.040941294f : 
                        0.057876192f))) : 
             (data[10 /* RISK_RATED_AREA_C */] < 7.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27224814E12f ? 
                     (data[25 /* WALL_CONSTRUCTION */] < 4.5f ? 
                        -0.17957105f : 
                        0.021805966f) : 
                     (Double.isNaN(data[15]) || data[15 /* SPEC_SUM_INSURED */] < 4180.5f ? 
                        -0.005722016f : 
                        -0.123923115f)) : 
                 (data[17 /* UNSPEC_HRP_PREM */] < 24.133595f ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 333.30283f ? 
                        -0.019049669f : 
                        -0.0754823f) : 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 428.5322f ? 
                        0.007108491f : 
                        0.07556538f)))) : 
         (data[57 /* MTA_DATE */] < 8.5f ? 
             (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(32, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(32, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[57])) ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 23.5f ? 
                        0.1580771f : 
                        -0.101694755f) : 
                     (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(32, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(32, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[57])) ? 
                        -0.1021821f : 
                        0.32938772f)) : 
                 (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                    0.13673696f : 
                     (Double.isNaN(data[41 /* LEGAL_ADDON_POST_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[41]) || (data[41] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[41]) && (data[41] < 2) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[41])) ? 
                        0.56530064f : 
                        0.38848373f))) : 
             (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[18])) ? 
                 (data[58 /* LAST_ANN_PREM_GROSS */] < 94.309845f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        -0.062443f : 
                        -0.090418436f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.021884635f : 
                        -0.079315476f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.10039472f : 
                        0.022988556f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.008047434f : 
                        -0.0828046f)))));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 30, static init size = 210B
  // {10100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-123, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 1, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {18, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {29, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_34_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
                 (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[35])) ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 15.244687f ? 
                        -0.043582644f : 
                        0.039522674f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 2.5f ? 
                        0.0105078565f : 
                        0.052028645f)) : 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                        0.073961064f : 
                        0.09995908f) : 
                     (Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[40]) || (data[40] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[40])) ? 
                        -0.10035902f : 
                        0.044361398f))) : 
             (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 174.18149f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        -0.048661195f : 
                        0.027322063f) : 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 136.07812f ? 
                        -0.09115706f : 
                        -0.019376544f)) : 
                 (data[10 /* RISK_RATED_AREA_C */] < 9.5f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                        0.015667295f : 
                        0.078839295f) : 
                     (data[17 /* UNSPEC_HRP_PREM */] < 35.625782f ? 
                        -0.009306662f : 
                        0.032132998f)))) : 
         (data[57 /* MTA_DATE */] < 845.5f ? 
             (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(846, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(846, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT5, 846, 0, data[57])) ? 
                 (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(846, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(846, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT6, 846, 0, data[57])) ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(846, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT7, 846, 0, data[57])) ? 
                        -0.39991578f : 
                        -0.0676918f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.13946824f : 
                        -0.004629172f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(844, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT8, 844, 0, data[57])) ? 
                        0.18727808f : 
                        0.77563256f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.258811f : 
                        0.31425363f))) : 
             (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(441, 846, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(441, 846, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT9, 441, 846, data[57])) ? 
                 (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(441, 846, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(441, 846, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT10, 441, 846, data[57])) ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(441, 846, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT11, 441, 846, data[57])) ? 
                        -0.2856211f : 
                        -0.032305896f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.4116193f : 
                        0.15382439f)) : 
                1.3246087f)));
    return pred;
  } // constant pool size = 738B, number of visited nodes = 28, static init size = 3744B
  // {01000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 1, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 1, 0, 0, 0, -128, 0, 9, 0, 0, -120, -128, 24, 17, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 16, -126, -128, 0, 32, 5, 0, 0, 0, 0, 0, -120, 2, 0, -111, 32, 4, 18, 0, 0, 0, -56, 16, 16, 0, 8, 4, 0, 1, 0, 0, 0, 64, 0, 1, 0, 33, -128, 24, 0, 4, 0, 32, 1, 32, 0, 0, 0, 0, 0, 0, 17, 2, 2, 0, 0, 16, 0, 1, 2, 64, 8, 0, 1, 32, 0, 0, 0, 0, -128, 0, 64, 0, 0, 0, 36, 66, -128, 8};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {94, 0, 0, 0, 9, 12, 17, 2, 16, 0, 0, 16, 1, 0, 0, 0, 32, -94, 0, 96, 10, -124, 76, 2, 0, 0, 8, -128, 12, 48, 1, 16, 2, 0, 64, 0, 0, 4, 0, 0, 64, 0, -64, 64, 0, 0, 16, 64, 16, 0, 4, 0, 33, 0, 8, 32, 0, 0, 0, -124, 0, 0, 64, 2, 0, 64, 0, 0, 32, 0, 0, 25, 8, 2, 0, -120, -127, 8, 0, -124, 8, 1, 1, 32, 16, 0, 20, 8, 2, -128, -108, 76, 0, 64, 0, 8, 35, 3, 2, -128, 4, 16, 64, -128, 0, 48};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, 63};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, 127, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
  // {...846 0-bits}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0};
  // {...846 0-bits}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 32, 48, 0, -128, 16, 0, 72, 17, 8, 0, 0, 0, -128, 0, 0, 0, 0, 32, 4, 0, 2, 0, -128, 0, 0, 4, 4, 16, 0, 16, 0, 65, 4, 2, 4, 16, -64, 0, 6, 40, 8, 32, 0, 0, 0, 0, 0, 24, 0, 66, 0};
  // {...846 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -2, -33, -33, -1, -1, -1, -1, -1, -1, -1, -2, -1, -2, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -9, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_35_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1985.0f ? 
                 (Double.isNaN(data[31]) || data[31 /* OWNERSHIP_TYPE */] < 11.5f ? 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        -0.043116733f : 
                        0.04354074f) : 
                     (data[37 /* YEARBUILT */] < 1888.0f ? 
                        0.07837428f : 
                        -0.019432567f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 15.244687f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 523.5f ? 
                        -0.055940498f : 
                        0.07733566f) : 
                     (!Double.isNaN(data[20 /* P1_SEX */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
                        -0.03449116f : 
                        0.08808876f))) : 
             (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 174.18149f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        -0.04502711f : 
                        0.024973495f) : 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 144.24281f ? 
                        -0.07611307f : 
                        -0.010837717f)) : 
                 (data[10 /* RISK_RATED_AREA_C */] < 9.5f ? 
                     (data[0 /* COVER_START */] < 1.03220255E12f ? 
                        -0.1282232f : 
                        0.019962104f) : 
                     (data[17 /* UNSPEC_HRP_PREM */] < 24.133595f ? 
                        -0.011211556f : 
                        0.019393949f)))) : 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
             (data[6 /* RISK_RATED_AREA_B */] < 16.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.048871137f : 
                        -0.070946045f) : 
                     (data[0 /* COVER_START */] < 1.24957085E12f ? 
                        0.06974319f : 
                        0.02364616f)) : 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 94.309845f ? 
                     (!Double.isNaN(data[5 /* AD_BUILDINGS */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                        -0.10223326f : 
                        -0.063358225f) : 
                     (data[56 /* MTA_APRP */] < 83.13375f ? 
                        -0.041932356f : 
                        0.012745917f))) : 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (data[0 /* COVER_START */] < 1.24433282E12f ? 
                     (data[56 /* MTA_APRP */] < 229.1847f ? 
                        -0.024131153f : 
                        0.19095805f) : 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 175.3386f ? 
                        -0.060254946f : 
                        0.063175865f)) : 
                 (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                     (data[57 /* MTA_DATE */] < 8.5f ? 
                        0.24945843f : 
                        -0.06689547f) : 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 43.903282f ? 
                        -0.09137899f : 
                        0.13803415f)))));
    return pred;
  } // constant pool size = 141B, number of visited nodes = 31, static init size = 90B
  // {10100001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-123, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_36_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 12.068711f ? 
             (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[35])) ? 
                 (!Double.isNaN(data[22 /* APPR_LOCKS */]) && (GenModel.bitSetIsInRange(32, 0, data[22]) && (data[22] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[22])) ? 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                        -0.119390614f : 
                        0.047518518f) : 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                        -0.025427971f : 
                        0.04812905f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[9 /* AD_CONTENTS */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[9])) ? 
                        0.021654917f : 
                        0.06333025f) : 
                     (Double.isNaN(data[60]) || data[60 /* i */] < 168085.5f ? 
                        -0.011479178f : 
                        0.020081153f))) : 
             (Double.isNaN(data[23]) || data[23 /* BEDROOMS */] < 4.5f ? 
                 (data[60 /* i */] < 4013.5f ? 
                     (!Double.isNaN(data[51 /* HP2_ADDON_POST_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[51]) && (data[51] < 2) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[51])) ? 
                        -0.086314894f : 
                        0.108873904f) : 
                     (Double.isNaN(data[15]) || data[15 /* SPEC_SUM_INSURED */] < 595.5f ? 
                        0.041252933f : 
                        0.008555901f)) : 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (data[17 /* UNSPEC_HRP_PREM */] < 16.43422f ? 
                        -0.15496895f : 
                        0.043461457f) : 
                     (Double.isNaN(data[60]) || data[60 /* i */] < 236009.5f ? 
                        -0.09459393f : 
                        0.09511173f)))) : 
         (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[18])) ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                     (data[57 /* MTA_DATE */] < 778.0f ? 
                        0.06988273f : 
                        -0.07885623f) : 
                    0.19571872f) : 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[18])) ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1199.5f ? 
                        -0.08893517f : 
                        0.2211328f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.017799314f : 
                        -0.08287999f))) : 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.13832586f : 
                        -0.016635705f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1264.5f ? 
                        0.0075073796f : 
                        0.4054929f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 9.5f ? 
                        0.035474457f : 
                        -0.009738475f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.06592852f : 
                        -0.100469366f)))));
    return pred;
  } // constant pool size = 162B, number of visited nodes = 30, static init size = 240B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {29, 3, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_37_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
             (data[58 /* LAST_ANN_PREM_GROSS */] < 70.3268f ? 
                 (!Double.isNaN(data[9 /* AD_CONTENTS */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[9])) ? 
                     (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                        -0.21928611f : 
                        -0.05053679f) : 
                     (data[28 /* MAX_DAYS_UNOCC */] < 59.0f ? 
                        -0.047829058f : 
                        -0.117888354f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 3.1759765f ? 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[35])) ? 
                        -0.039493978f : 
                        0.00904522f) : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                        -0.07863045f : 
                        0.03992445f))) : 
             (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1988.5f ? 
                        0.04648828f : 
                        -0.106413975f) : 
                     (data[0 /* COVER_START */] < 1.06781763E12f ? 
                        -0.22009493f : 
                        -0.031664692f)) : 
                 (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (data[56 /* MTA_APRP */] < 137.76265f ? 
                        -0.017494423f : 
                        0.051055413f) : 
                     (!Double.isNaN(data[29 /* NEIGH_WATCH */]) && (GenModel.bitSetIsInRange(32, 0, data[29]) && (data[29] < 2) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[29])) ? 
                        0.047530603f : 
                        0.13010985f)))) : 
         (data[56 /* MTA_APRP */] < 93.201096f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                 (Double.isNaN(data[33]) || data[33 /* PROP_TYPE */] < 46.5f ? 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 635.0f ? 
                        -0.029646901f : 
                        0.041616526f) : 
                    -0.14644971f) : 
                 (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 64.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.0416574f : 
                        -0.0922488f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.09773328f : 
                        -0.028593406f))) : 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
                 (data[60 /* i */] < 4003.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.12688021f : 
                        0.07469652f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1284.5f ? 
                        -0.05458867f : 
                        0.17806539f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (!Double.isNaN(data[38 /* PAYMENT_METHOD */]) && (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[38])) ? 
                        -0.005744017f : 
                        0.042530954f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.01987238f : 
                        -0.07502124f)))));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 30, static init size = 210B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {11110101 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-81, 7, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {31, 3, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {5, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_38_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 16.197481f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                 (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                     (data[10 /* RISK_RATED_AREA_C */] < 20.5f ? 
                        -0.023018047f : 
                        -0.1061384f) : 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 6.078906f ? 
                        -0.006180485f : 
                        0.059123922f)) : 
                 (data[60 /* i */] < 2009.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 2.0f ? 
                        -0.09422619f : 
                        -0.32017386f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.01677922f : 
                        0.05135728f))) : 
             (data[58 /* LAST_ANN_PREM_GROSS */] < 198.04973f ? 
                 (data[58 /* LAST_ANN_PREM_GROSS */] < 70.68408f ? 
                    0.14468707f : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        -0.05658561f : 
                        0.056342367f)) : 
                 (data[55 /* MTA_FAP */] < 208.26547f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.24222951E12f ? 
                        -0.029102998f : 
                        -0.31705648f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.056717824f : 
                        -0.0051262868f)))) : 
         (data[56 /* MTA_APRP */] < 93.201096f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                 (Double.isNaN(data[49 /* HP1_ADDON_POST_REN */]) || !GenModel.bitSetIsInRange(32, 0, data[49]) || (data[49] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[49]) && (data[49] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[49])) ? 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 39.338905f ? 
                        -0.030799214f : 
                        0.08286629f) : 
                    0.13202214f) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                        -0.059553217f : 
                        0.024234807f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.073946975f : 
                        -0.089953765f))) : 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                 (data[60 /* i */] < 4003.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.118974455f : 
                        0.06384258f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1284.5f ? 
                        -0.05113995f : 
                        0.15434915f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.276155E12f ? 
                        0.030239588f : 
                        -0.0398671f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.017874891f : 
                        -0.07302224f)))));
    return pred;
  } // constant pool size = 138B, number of visited nodes = 29, static init size = 120B
  // {11110111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-17, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11111000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {31, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_39_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
         (Double.isNaN(data[7]) || data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
             (!Double.isNaN(data[5 /* AD_BUILDINGS */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                 (Double.isNaN(data[11]) || data[11 /* SUM_INSURED_CONTENTS */] < 25000.5f ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 347.14874f ? 
                        -0.1069344f : 
                        0.11130944f) : 
                    -0.33184937f) : 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[57 /* MTA_DATE */] < 663.5f ? 
                        0.060235713f : 
                        0.0063831415f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        0.56083035f : 
                        -0.06558718f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 0.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 1.5f ? 
                        0.07669297f : 
                        0.050455566f) : 
                     (Double.isNaN(data[33]) || data[33 /* PROP_TYPE */] < 22.0f ? 
                        0.10187446f : 
                        -0.09446525f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.30317117E12f ? 
                        -0.021990309f : 
                        -0.19382243f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.035979215f : 
                        0.04973921f)))) : 
         (data[60 /* i */] < 5503.5f ? 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (data[56 /* MTA_APRP */] < 103.8443f ? 
                     (data[6 /* RISK_RATED_AREA_B */] < 4.5f ? 
                        -0.16190839f : 
                        -0.022671305f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.0f ? 
                        0.1317403f : 
                        -0.124550715f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[56 /* MTA_APRP */] < 536.4982f ? 
                        -0.024813546f : 
                        0.072627015f) : 
                     (data[60 /* i */] < 1720.5f ? 
                        0.05473454f : 
                        -0.10047976f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        0.003971328f : 
                        0.13291445f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        -0.08029139f : 
                        0.05754725f)) : 
                 (!Double.isNaN(data[9 /* AD_CONTENTS */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 227.57562f ? 
                        -0.07449822f : 
                        0.091399774f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        0.03897766f : 
                        -0.020323593f)))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 30, static init size = 90B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-127, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_40_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
         (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
             (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                 (data[57 /* MTA_DATE */] < 647.5f ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(647, 1, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT2, 647, 1, data[57])) ? 
                        -0.21691811f : 
                        0.10595831f) : 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(639, 648, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT3, 639, 648, data[57])) ? 
                        -0.34132338f : 
                        -0.016403701f)) : 
                 (Double.isNaN(data[38 /* PAYMENT_METHOD */]) || !GenModel.bitSetIsInRange(32, 0, data[38]) || (data[38] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[38])) ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[18])) ? 
                        -0.20725815f : 
                        0.0025067537f) : 
                     (!Double.isNaN(data[10]) ? 
                        0.032121114f : 
                        -0.015425559f))) : 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.29328244E12f ? 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.15773246f : 
                        0.09157583f) : 
                    -0.15835892f) : 
                 (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 7.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 2.5f ? 
                        -0.07833036f : 
                        -0.14926612f) : 
                     (data[37 /* YEARBUILT */] < 1931.5f ? 
                        -0.020750571f : 
                        0.113780215f)))) : 
         (data[58 /* LAST_ANN_PREM_GROSS */] < 157.87984f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                 (data[0 /* COVER_START */] < 1.22962326E12f ? 
                     (Double.isNaN(data[59 /* POL_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[59]) || (data[59] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[59]) && (data[59] < 4) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[59])) ? 
                        -0.08227925f : 
                        0.015453772f) : 
                     (data[0 /* COVER_START */] < 1.26310285E12f ? 
                        0.10545744f : 
                        -0.017643338f)) : 
                 (data[57 /* MTA_DATE */] < 1.5f ? 
                    0.46482468f : 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 88.8375f ? 
                        -0.0406122f : 
                        0.6196862f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[23]) || data[23 /* BEDROOMS */] < 3.5f ? 
                        -0.009043543f : 
                        0.05836584f) : 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 180.59062f ? 
                        0.07431198f : 
                        0.020583494f)) : 
                 (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.018596401f : 
                        -0.007145041f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.033477042f : 
                        -0.050672993f)))));
    return pred;
  } // constant pool size = 309B, number of visited nodes = 29, static init size = 1158B
  // {01100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-122, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT2 = new byte[] {-66, -1, -2, -1, 127, -1, -1, -2, -1, -1, -3, -49, -3, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -9, -18, -1, -9, -1, -3, -1, -5, -1, -1, -33, -1, -1, -1, -1, -1, -1, -3, -1, -2, -1, -5, -9, -1, -65, -9, -65, -1, -1, -1, -1, -17, -1, 127, -1, -9, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, 127};
  // {...648 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -2, -33, -17, -65, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -34, -1, -1, -1, -13, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -2, -1, -1, -5, 119, -1, -1, -5, -11, -2, -1, -1, -1, -1, -5, -1, -1, 126, 127};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, 3, 0, 0};
  // {11110101 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-81, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_41_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
         (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
             (!Double.isNaN(data[40 /* LEGAL_ADDON_PRE_REN */]) && (GenModel.bitSetIsInRange(32, 0, data[40]) && (data[40] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[40])) ? 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 199.28625f ? 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[35])) ? 
                        -0.036108818f : 
                        -0.0052457214f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.032135602f : 
                        0.064965166f)) : 
                 (Double.isNaN(data[38 /* PAYMENT_METHOD */]) || !GenModel.bitSetIsInRange(32, 0, data[38]) || (data[38] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[38])) ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                        -0.055995725f : 
                        0.0027921363f) : 
                     (data[10 /* RISK_RATED_AREA_C */] < 9.5f ? 
                        0.030115489f : 
                        0.008480463f))) : 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.23229884E12f ? 
                        0.08814552f : 
                        -0.085167184f) : 
                     (data[55 /* MTA_FAP */] < 251.57016f ? 
                        -0.10457759f : 
                        0.12122828f)) : 
                 (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 16.547266f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 13.676016f ? 
                        -0.06939645f : 
                        0.100733005f) : 
                    -0.10077369f))) : 
         (data[0 /* COVER_START */] < 1.16833321E12f ? 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[55 /* MTA_FAP */] < 163.26157f ? 
                        -0.12186135f : 
                        -0.072816014f) : 
                    -0.11775445f) : 
                 (data[60 /* i */] < 2370.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.06070717E12f ? 
                        -0.101656f : 
                        0.3438026f) : 
                     (Double.isNaN(data[11]) || data[11 /* SUM_INSURED_CONTENTS */] < 72500.5f ? 
                        -0.07221069f : 
                        -0.41946703f))) : 
             (data[0 /* COVER_START */] < 1.24163706E12f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                        0.10264979f : 
                        0.5742142f) : 
                     (data[56 /* MTA_APRP */] < 181.46f ? 
                        -0.05999658f : 
                        0.0715081f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                     (Double.isNaN(data[5 /* AD_BUILDINGS */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                        -0.048259333f : 
                        0.037591375f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.012779353f : 
                        -0.052329022f)))));
    return pred;
  } // constant pool size = 153B, number of visited nodes = 29, static init size = 210B
  // {01100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-122, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {01101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-10, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_42_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
         (!Double.isNaN(data[38 /* PAYMENT_METHOD */]) && (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[38])) ? 
             (data[60 /* i */] < 3002.5f ? 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 12.374141f ? 
                     (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                        -0.07924026f : 
                        0.0737479f) : 
                     (Double.isNaN(data[22 /* APPR_LOCKS */]) || !GenModel.bitSetIsInRange(32, 0, data[22]) || (data[22] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[22]) && (data[22] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[22])) ? 
                        0.115793705f : 
                        0.21667366f)) : 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                     (!Double.isNaN(data[35 /* SEC_DISC_REQ */]) && (GenModel.bitSetIsInRange(32, 0, data[35]) && (data[35] < 2) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[35])) ? 
                        -0.0289867f : 
                        -0.0055765533f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.06878009f : 
                        -0.060461875f))) : 
             (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 144.5f ? 
                 (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(145, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(145, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT4, 145, 0, data[57])) ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(145, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT5, 145, 0, data[57])) ? 
                        -0.17719457f : 
                        0.014149816f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.09102529f : 
                        0.23858f)) : 
                 (data[56 /* MTA_APRP */] < 27.16996f ? 
                     (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 2.5f ? 
                        0.12557162f : 
                        0.06808818f) : 
                     (!Double.isNaN(data[59 /* POL_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[59]) && (data[59] < 4) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[59])) ? 
                        -0.019660048f : 
                        0.044632424f)))) : 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
             (data[6 /* RISK_RATED_AREA_B */] < 8.5f ? 
                 (data[28 /* MAX_DAYS_UNOCC */] < 16.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        0.025536168f : 
                        0.17334098f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.060931712f : 
                        -0.045127016f)) : 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 218.8128f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        -0.030147796f : 
                        -0.028198222f) : 
                     (data[56 /* MTA_APRP */] < 221.13875f ? 
                        -0.033033222f : 
                        0.040799566f))) : 
             (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 44.16629f ? 
                 (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[18])) ? 
                     (data[57 /* MTA_DATE */] < 5.5f ? 
                        0.16377795f : 
                        -0.0916716f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        -0.039663963f : 
                        -0.1003252f)) : 
                 (Double.isNaN(data[60]) || data[60 /* i */] < 220104.5f ? 
                     (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                        -0.1003902f : 
                        -0.10045382f) : 
                     (data[10 /* RISK_RATED_AREA_C */] < 12.5f ? 
                        3.3684602f : 
                        -0.10042828f)))));
    return pred;
  } // constant pool size = 196B, number of visited nodes = 31, static init size = 420B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01100001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-122, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {10000000 10000110 00000000 10100000 00000000 00010000 00001000 00001000 00000001 00000100 00010001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 97, 0, 5, 0, 8, 16, 16, -128, 32, -120, 0, 0, 16, 0, 0, 0, 0, 0};
  // {11111111 11111111 00111110 10111110 11111111 11011101 11111111 11111111 11111111 11111111 11111111 11111001 11111111 11111111 10011111 11011111 11111111 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, 124, 125, -1, -69, -1, -1, -1, -1, -1, -97, -1, -1, -7, -5, -1, -1, 1};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {5, 0, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 1, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_43_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
         (Double.isNaN(data[7]) || data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
             (!Double.isNaN(data[5 /* AD_BUILDINGS */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                 (Double.isNaN(data[11]) || data[11 /* SUM_INSURED_CONTENTS */] < 25000.5f ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 347.14874f ? 
                        -0.102704324f : 
                        0.094448015f) : 
                    -0.27309138f) : 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        -0.016882274f : 
                        0.015918538f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
                        -0.07286746f : 
                        -0.012606481f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 0.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                     (data[55 /* MTA_FAP */] < 210.65625f ? 
                        -0.029850785f : 
                        0.06276751f) : 
                     (Double.isNaN(data[33]) || data[33 /* PROP_TYPE */] < 22.0f ? 
                        0.09745072f : 
                        -0.09763656f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.30317117E12f ? 
                        -0.021994328f : 
                        -0.16909525f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        0.06945213f : 
                        0.02824418f)))) : 
         (data[56 /* MTA_APRP */] < 142.7075f ? 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 22.0f ? 
                     (data[0 /* COVER_START */] < 1.22442836E12f ? 
                        -0.10896025f : 
                        -0.03660906f) : 
                     (data[23 /* BEDROOMS */] < 2.5f ? 
                        -0.19989367f : 
                        -0.12715076f)) : 
                 (!Double.isNaN(data[2 /* P1_PT_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 9) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                     (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 11.0f ? 
                        0.0093455985f : 
                        -0.38943028f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 10.087656f ? 
                        -0.025408007f : 
                        -0.054242324f))) : 
             (data[60 /* i */] < 4003.5f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 18.317188f ? 
                        0.11730009f : 
                        -0.038449705f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.050571684f : 
                        -0.0070696683f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.28355834E12f ? 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.18242987E12f ? 
                        -0.017590377f : 
                        0.031778604f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.06437494f : 
                        -0.037690744f)))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 30, static init size = 90B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00101010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {84, 3, 0, 0};
  // {11111001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-97, 1, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_44_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
         (Double.isNaN(data[38 /* PAYMENT_METHOD */]) || !GenModel.bitSetIsInRange(32, 0, data[38]) || (data[38] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[38])) ? 
             (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1243.5f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                        -0.008080955f : 
                        -0.045725245f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.013254025f : 
                        -0.011542289f)) : 
                 (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(43, 1244, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(43, 1244, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT1, 43, 1244, data[57])) ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(43, 1244, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT2, 43, 1244, data[57])) ? 
                        -0.051695157f : 
                        0.12686017f) : 
                    0.27548334f)) : 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.28601004E12f ? 
                 (data[58 /* LAST_ANN_PREM_GROSS */] < 67.49641f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        -0.08190115f : 
                        0.0054856534f) : 
                     (data[10 /* RISK_RATED_AREA_C */] < 27.5f ? 
                        0.02801688f : 
                        -0.0046308436f)) : 
                 (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 3.5f ? 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                        -0.083871f : 
                        -0.018738098f) : 
                     (data[23 /* BEDROOMS */] < 2.5f ? 
                        0.16191523f : 
                        0.08259835f)))) : 
         (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
             (data[6 /* RISK_RATED_AREA_B */] < 20.5f ? 
                 (data[56 /* MTA_APRP */] < 91.75906f ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 47.2343f ? 
                        -0.0044141198f : 
                        -0.19410431f) : 
                     (data[0 /* COVER_START */] < 1.2478428E12f ? 
                        0.07839289f : 
                        0.020087367f)) : 
                 (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 356.22f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        -0.040728312f : 
                        -0.03324879f) : 
                     (data[10 /* RISK_RATED_AREA_C */] < 4.5f ? 
                        0.21330611f : 
                        0.029267194f))) : 
             (data[60 /* i */] < 2001.5f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.10245233f : 
                        0.74127126f) : 
                     (data[57 /* MTA_DATE */] < 150.0f ? 
                        0.4017915f : 
                        -0.068766184f)) : 
                 (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                     (data[57 /* MTA_DATE */] < 8.5f ? 
                        0.26858464f : 
                        -0.04883919f) : 
                     (data[57 /* MTA_DATE */] < 1.5f ? 
                        0.12242709f : 
                        -0.08712171f)))));
    return pred;
  } // constant pool size = 151B, number of visited nodes = 30, static init size = 174B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {...1244 0-bits... 10000001 00000000 00000110 00000000 00010000 100}
  public static final byte[] GRPSPLIT1 = new byte[] {-127, 0, 96, 0, 8, 1};
  // {...1244 0-bits... 01010000 01100100 00010000 00010000 00100000 001}
  public static final byte[] GRPSPLIT2 = new byte[] {10, 38, 8, 8, 4, 4};
  // {00110111 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-20, 4, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {127, 3, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_45_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
         (Double.isNaN(data[7]) || data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
             (!Double.isNaN(data[5 /* AD_BUILDINGS */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                 (Double.isNaN(data[11]) || data[11 /* SUM_INSURED_CONTENTS */] < 25000.5f ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 386.2875f ? 
                        -0.09791838f : 
                        0.08261514f) : 
                    -0.22836973f) : 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (data[57 /* MTA_DATE */] < 663.5f ? 
                        0.047430567f : 
                        0.0033911492f) : 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.055197194f : 
                        0.37841406f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 0.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                        -0.050002996f : 
                        0.056073505f) : 
                     (Double.isNaN(data[33]) || data[33 /* PROP_TYPE */] < 22.0f ? 
                        0.09381102f : 
                        -0.083488f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 1.5f ? 
                     (data[0 /* COVER_START */] < 1.29336476E12f ? 
                        0.02930108f : 
                        -0.05565128f) : 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 150.5325f ? 
                        0.061570793f : 
                        0.02453192f)))) : 
         (data[58 /* LAST_ANN_PREM_GROSS */] < 146.58191f ? 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (data[57 /* MTA_DATE */] < 963.5f ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(958, 6, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT3, 958, 6, data[57])) ? 
                        -0.15282442f : 
                        0.22198375f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.017293693f : 
                        -0.07417531f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        -0.029079882f : 
                        -0.066626064f) : 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 18.9f ? 
                        -0.077274695f : 
                        0.28591767f))) : 
             (data[56 /* MTA_APRP */] < 142.7075f ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 18.92f ? 
                        -0.047655035f : 
                        -0.14929418f) : 
                     (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 36.6f ? 
                        -0.017152356f : 
                        -0.10258669f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        0.003968469f : 
                        0.0485571f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.014133502f : 
                        -0.069494784f)))));
    return pred;
  } // constant pool size = 258B, number of visited nodes = 30, static init size = 816B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11011111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, 2, 0, 0};
  // {...6 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0, 0, -128, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 8, 64, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_46_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[38 /* PAYMENT_METHOD */]) && (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[38])) ? 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                 (data[10 /* RISK_RATED_AREA_C */] < 2.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* RISK_RATED_AREA_C */] < 0.5f ? 
                        0.11225422f : 
                        0.028150069f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.015277766f : 
                        -0.068253726f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.29019098E12f ? 
                     (Double.isNaN(data[60]) || data[60 /* i */] < 144128.5f ? 
                        0.015203914f : 
                        -0.057816394f) : 
                     (data[60 /* i */] < 40140.5f ? 
                        0.068044975f : 
                        -0.12014882f))) : 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                 (data[6 /* RISK_RATED_AREA_B */] < 4.5f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.061665617f : 
                        0.02950285f) : 
                     (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27539229E12f ? 
                        0.013506709f : 
                        0.04534991f)) : 
                 (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 1264.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 22.690937f ? 
                        -0.017466074f : 
                        -0.04006711f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.23466116f : 
                        0.0081685055f)))) : 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
             (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 133.5f ? 
                 (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(134, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[57])) ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 6.5f ? 
                        -0.08983444f : 
                        -0.22723827f) : 
                     (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(134, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(134, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[57])) ? 
                        0.012052327f : 
                        0.14594622f)) : 
                 (Double.isNaN(data[33]) || data[33 /* PROP_TYPE */] < 19.5f ? 
                     (data[10 /* RISK_RATED_AREA_C */] < 19.5f ? 
                        0.051361177f : 
                        -0.005210289f) : 
                     (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                        -0.15003352f : 
                        -0.017782921f))) : 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 278.21936f ? 
                        -0.005939834f : 
                        0.03451227f) : 
                     (Double.isNaN(data[28]) || data[28 /* MAX_DAYS_UNOCC */] < 18.5f ? 
                        0.12335322f : 
                        -0.07559127f)) : 
                 (data[57 /* MTA_DATE */] < 8.5f ? 
                     (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(32, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(32, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[57])) ? 
                        0.0111919865f : 
                        1.5898396f) : 
                     (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                        -0.015402703f : 
                        -0.079057954f)))));
    return pred;
  } // constant pool size = 177B, number of visited nodes = 31, static init size = 306B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {00100011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-60, 1, 0, 0};
  // {10111111 11111111 00111110 11111110 11111111 01011101 11111111 11111111 11111111 11111111 11011111 11111001 11111111 11111111 11011111 01011111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, -1, 124, 127, -1, -70, -1, -1, -1, -1, -5, -97, -1, -1, -5, -6, 63};
  // {10000100 10000110 00000000 01100000 00000000 00010000 00001010 00001000 00000001 00000100 01010001 00000000 00000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 97, 0, 6, 0, 8, 80, 16, -128, 32, -118, 0, 0, 16, 0, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 1, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_47_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 208.72052f ? 
         (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 0.5f ? 
                 (data[10 /* RISK_RATED_AREA_C */] < 6.5f ? 
                     (data[58 /* LAST_ANN_PREM_GROSS */] < 73.16609f ? 
                        -0.07362422f : 
                        0.058619574f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.016236383f : 
                        -0.055029314f)) : 
                 (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.29359295E12f ? 
                     (Double.isNaN(data[15]) || data[15 /* SPEC_SUM_INSURED */] < 546.5f ? 
                        -0.03717276f : 
                        0.06381775f) : 
                     (Double.isNaN(data[58]) || data[58 /* LAST_ANN_PREM_GROSS */] < 190.89015f ? 
                        -0.0796321f : 
                        -0.18635015f))) : 
             (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                 (data[60 /* i */] < 6006.5f ? 
                     (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 6.351953f ? 
                        -0.109534994f : 
                        0.06389493f) : 
                     (!Double.isNaN(data[1 /* P1_EMP_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        -0.056492873f : 
                        0.018278515f)) : 
                 (data[57 /* MTA_DATE */] < 1.5f ? 
                     (data[60 /* i */] < 114062.5f ? 
                        -0.10304122f : 
                        0.41101044f) : 
                     (Double.isNaN(data[16]) || data[16 /* SPEC_ITEM_PREM */] < 88.8375f ? 
                        -0.015999835f : 
                        0.36863348f)))) : 
         (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.19284918E12f ? 
                 (data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
                     (!Double.isNaN(data[5 /* AD_BUILDINGS */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
                        -0.08384069f : 
                        0.008235797f) : 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 0.5f ? 
                        0.05496431f : 
                        0.03671997f)) : 
                 (data[0 /* COVER_START */] < 1.23142354E12f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                        0.08833977f : 
                        -0.14889884f) : 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                        -0.06946992f : 
                        0.014736616f))) : 
             (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[18])) ? 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                        -0.048560955f : 
                        0.071850084f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                        0.020709045f : 
                        -0.059801955f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[56 /* MTA_APRP */] < 207.26375f ? 
                        -0.044839017f : 
                        0.031139834f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.013910286f : 
                        -0.04255982f)))));
    return pred;
  } // constant pool size = 151B, number of visited nodes = 31, static init size = 150B
  // {11101101 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-73, 4, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10001010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {81, 2, 0, 0};
  // {10011000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {25, 3, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_48_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[38 /* PAYMENT_METHOD */]) && (GenModel.bitSetIsInRange(32, 0, data[38]) && (data[38] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[38])) ? 
         (data[56 /* MTA_APRP */] < 220.50328f ? 
             (data[57 /* MTA_DATE */] < 774.5f ? 
                 (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(775, 0, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(775, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT1, 775, 0, data[57])) ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(775, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT2, 775, 0, data[57])) ? 
                        -0.22370097f : 
                        0.010386812f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.19191334f : 
                        0.19434454f)) : 
                 (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(512, 775, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT3, 512, 775, data[57])) ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        -0.23133543f : 
                        -0.15759635f) : 
                     (Double.isNaN(data[57 /* MTA_DATE */]) || !GenModel.bitSetIsInRange(512, 775, data[57]) || (data[57] >= 1287) || (GenModel.bitSetIsInRange(512, 775, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT4, 512, 775, data[57])) ? 
                        -0.024351254f : 
                        0.30244505f))) : 
             (data[60 /* i */] < 2006.5f ? 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1951.5f ? 
                        0.16774453f : 
                        -0.007239803f) : 
                     (data[0 /* COVER_START */] < 1.20285535E12f ? 
                        0.21037093f : 
                        -0.017970994f)) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 1.5f ? 
                        -0.04142682f : 
                        -0.0032846336f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.015598129f : 
                        -0.013042712f)))) : 
         (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
             (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 8.5f ? 
                 (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 133.5f ? 
                     (!Double.isNaN(data[57 /* MTA_DATE */]) && (GenModel.bitSetIsInRange(134, 0, data[57]) && (data[57] < 1287) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[57])) ? 
                        -0.12032f : 
                        0.012520611f) : 
                     (data[6 /* RISK_RATED_AREA_B */] < 4.5f ? 
                        0.072083816f : 
                        0.020336205f)) : 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 1.5f ? 
                     (Double.isNaN(data[60]) || data[60 /* i */] < 202281.5f ? 
                        -0.13541207f : 
                        0.1349689f) : 
                     (Double.isNaN(data[1 /* P1_EMP_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.20930313f : 
                        -0.049377125f))) : 
             (Double.isNaN(data[26 /* FLOODING */]) || !GenModel.bitSetIsInRange(32, 0, data[26]) || (data[26] >= 2) || (GenModel.bitSetIsInRange(32, 0, data[26]) && (data[26] < 2) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[26])) ? 
                 (data[57 /* MTA_DATE */] < 8.5f ? 
                     (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                        0.20273452f : 
                        0.025695795f) : 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[18])) ? 
                        -0.035064176f : 
                        0.008165374f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
                        0.069967926f : 
                        0.16215768f) : 
                     (Double.isNaN(data[18 /* P1_MAR_STATUS */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[18])) ? 
                        -0.030233184f : 
                        1.3526388f)))));
    return pred;
  } // constant pool size = 495B, number of visited nodes = 31, static init size = 2214B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, 0, 9, 66, 0, 8, 0, 0, 0, 80, 8, 0, 0, 2, 0, 32, -128, 0, 0, 16, 64, 0, 0, 0, 0, 80, -128, -128, 0, 32, -127, 0, 0, 0, 12, 0, -96, 0, 0, 5, 32, 0, 16, 0, -128, 2, 0, 4, 64, 32, 16, 0, 0, 32, 32, 64, 2, 64, 0, -112, 0, 1, 0, 0, 0, 0, 0, 32, 0, 9, 0, 0, 32, 0, 0, 0, 7, -128, -126, 0, 8, 0, -124, 1, 20, 0, 0, 0, 0, 65, 0, 64, 0, 1, 1};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, -33, -1, -11, -1, -1, -1, -1, -9, -1, -5, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -5, 127, -1, -9, -1, -3, -3, -5, -17, -1, -65, -1, -5, -1, -1, -1, -2, 127, -1, -1, 127, -9, 127, -2, -1, -5, -1, -3, -1, -17, -2, -1, -65, -81, -1, -1, -1, -1, -65, -1, -3, -65, -1, -1, -65, -1, -1, -33, -1, -1, -2, -2, -2, -1, -81, -1, -66, -1, -1, 119, -19, -1, -65, -1, -49, -1, 127};
  // {...775 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {93, -1, -17, -1, 127, -33, -1, -1, 91, -98, -1, -9, -101, -1, -9, 61, -1, -1, -17, -1, -1, -1, -1, -1, -17, -1, -1, -1, -10, -1, -1, -1, -97, -1, -1, -17, -3, -1, -3, -13, 127, -65, 110, -1, -9, -3, -17, -1, -9, -1, -1, -1, -9, -17, -17, -3, -1, -1, -1, -1, -1, -1, -3, -1};
  // {...775 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 16, 0, 0, 1, 16, 0, 0, 0, 32, 36, 0, 0, 0, 0, 2, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 2, 1, 0, 64, 64, 0, 0, 0, 0, -128, 0, 0, 0, 16, 0, 4, 0, 32};
  // {10111111 11011111 00111110 11111110 10111111 01011101 11111111 11111111 11110111 11111111 11011111 11111001 11111111 11111111 11011111 01011111 110110}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, -5, 124, 127, -3, -70, -1, -1, -17, -1, -5, -97, -1, -1, -5, -6, 27};
  // {00101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {84, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {10101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {85, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
}


class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_49_class_0.score0(fdata);
  }
}
class gbm_6f22aa26_d225_4f84_861f_844eddc7b2ce_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* NCD_GRANTED_YEARS_B */] < 3.5f ? 
         (Double.isNaN(data[7]) || data[7 /* SUM_INSURED_BUILDINGS */] < 500000.5f ? 
             (!Double.isNaN(data[5 /* AD_BUILDINGS */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 2) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                 (Double.isNaN(data[6]) || data[6 /* RISK_RATED_AREA_B */] < 7.0f ? 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 347.14874f ? 
                        -0.09186236f : 
                        0.08747307f) : 
                    -0.17617358f) : 
                 (data[12 /* NCD_GRANTED_YEARS_C */] < 2.5f ? 
                     (data[31 /* OWNERSHIP_TYPE */] < 5.5f ? 
                        -0.100870594f : 
                        -0.0056843786f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                        0.02433408f : 
                        -0.018133605f))) : 
             (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 3.5f ? 
                 (Double.isNaN(data[37]) || data[37 /* YEARBUILT */] < 1984.5f ? 
                     (!Double.isNaN(data[18 /* P1_MAR_STATUS */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[18])) ? 
                        -0.02014515f : 
                        0.03796129f) : 
                     (Double.isNaN(data[57]) || (data[57] >= 1287) || data[57 /* MTA_DATE */] < 126.5f ? 
                        -0.100301415f : 
                        0.11440656f)) : 
                 (Double.isNaN(data[56]) || data[56 /* MTA_APRP */] < 46.48914f ? 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        0.08430295f : 
                        0.03896564f) : 
                     (data[57 /* MTA_DATE */] < 1264.5f ? 
                        -0.015155203f : 
                        -0.21660656f)))) : 
         (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.27620363E12f ? 
             (Double.isNaN(data[0]) || data[0 /* COVER_START */] < 1.18768743E12f ? 
                 (data[60 /* i */] < 6004.5f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        0.05383092f : 
                        0.016003616f) : 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                        -0.008662067f : 
                        -0.019484062f)) : 
                 (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                     (data[0 /* COVER_START */] < 1.24151805E12f ? 
                        0.07940001f : 
                        0.003954838f) : 
                     (data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                        0.019970657f : 
                        -0.045485377f))) : 
             (data[8 /* NCD_GRANTED_YEARS_B */] < 4.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 5.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 4.5f ? 
                        -0.04606411f : 
                        0.12030632f) : 
                     (Double.isNaN(data[12]) || data[12 /* NCD_GRANTED_YEARS_C */] < 6.5f ? 
                        -0.10603994f : 
                        0.011450189f)) : 
                 (Double.isNaN(data[17]) || data[17 /* UNSPEC_HRP_PREM */] < 34.93875f ? 
                     (data[8 /* NCD_GRANTED_YEARS_B */] < 5.5f ? 
                        -0.062876955f : 
                        -0.023770228f) : 
                     (Double.isNaN(data[55]) || data[55 /* MTA_FAP */] < 273.99625f ? 
                        0.09697281f : 
                        -0.20385951f)))));
    return pred;
  } // constant pool size = 132B, number of visited nodes = 30, static init size = 60B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01101111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-10, 0, 0, 0};
}


